{"version":3,"file":"vue-transmit.min.js","sources":["../src/core/utils.ts","../src/classes/VTransmitFile.ts","../src/upload-drivers/axios.ts","../src/classes/VTransmitUploadContext.ts","../src/components/VueTransmit.vue","../src/upload-drivers/xhr.ts","../src/index.ts"],"sourcesContent":["import { VTransmitFile } from \"../classes/VTransmitFile\";\r\n\r\nexport function is_function(x: any): x is Function {\r\n\treturn typeof x == \"function\";\r\n}\r\n\r\nlet idCounter = 0;\r\nexport function uniqueId(prefix: string): string {\r\n\treturn prefix + ++idCounter;\r\n}\r\n\r\nexport function round(number: number, decimals: number = 2) {\r\n\tconst roundingFactor = Math.pow(10, decimals);\r\n\treturn Math.round(number * roundingFactor) / roundingFactor;\r\n}\r\n\r\nexport function fromBytesToKbit(bytes: number): number {\r\n\treturn bytes / 125;\r\n}\r\n\r\nexport function fromBytesToMbit(bytes: number): number {\r\n\treturn bytes / 125000;\r\n}\r\n\r\nexport function toKbps(bytes: number, seconds: number): number {\r\n\treturn fromBytesToKbit(bytes) / seconds;\r\n}\r\n\r\nexport function toMbps(bytes: number, seconds: number): number {\r\n\treturn fromBytesToMbit(bytes) / seconds;\r\n}\r\n\r\nexport function NewObject() {\r\n\treturn {};\r\n}\r\n\r\nexport function noop() {}\r\n\r\nexport function scaleH(ratio: number, width: number): number {\r\n\treturn width / ratio;\r\n}\r\n\r\nexport function scaleW(ratio: number, height: number): number {\r\n\treturn height * ratio;\r\n}\r\n\r\nexport function expectNever(_: never, msg: string): never {\r\n\tthrow new Error(msg);\r\n}\r\n\r\nexport enum UploadStatuses {\r\n\tNone = \"\",\r\n\tAdded = \"added\",\r\n\tQueued = \"queued\",\r\n\tAccepted = \"queued\",\r\n\tUploading = \"uploading\",\r\n\tCanceled = \"canceled\",\r\n\tError = \"error\",\r\n\tTimeout = \"timeout\",\r\n\tSuccess = \"success\",\r\n}\r\n\r\nexport enum ErrType {\r\n\tAny,\r\n\tTimeout,\r\n}\r\n\r\nexport enum VTransmitEvents {\r\n\tInitialize = \"initialize\",\r\n\tAddedFile = \"added-file\",\r\n\tAddedFiles = \"added-files\",\r\n\tRemovedFile = \"removed-file\",\r\n\tAcceptedFile = \"accepted-file\",\r\n\tRejectedFile = \"rejected-file\",\r\n\tAcceptComplete = \"accept-complete\",\r\n\tThumbnail = \"thumbnail\",\r\n\tProcessing = \"processing\",\r\n\tProcessingMultiple = \"processing-multiple\",\r\n\tCanceled = \"canceled\",\r\n\tCanceledMultiple = \"canceled-multiple\",\r\n\tSending = \"sending\",\r\n\tSendingMultiple = \"sending-multiple\",\r\n\tTimeout = \"timeout\",\r\n\tTimeoutMultiple = \"timeout-multiple\",\r\n\tUploadProgress = \"upload-progress\",\r\n\tTotalUploadProgress = \"total-upload-progress\",\r\n\tSuccess = \"success\",\r\n\tSuccessMultiple = \"success-multiple\",\r\n\tQueueComplete = \"queue-complete\",\r\n\tComplete = \"complete\",\r\n\tCompleteMultiple = \"complete-multiple\",\r\n\tError = \"error\",\r\n\tErrorMultiple = \"error-multiple\",\r\n\tMaxFilesReached = \"max-files-reached\",\r\n\tMaxFilesExceeded = \"max-files-exceeded\",\r\n\tReset = \"reset\",\r\n\tDragOver = \"drag-over\",\r\n\tDragEnter = \"drag-enter\",\r\n\tDragLeave = \"drag-leave\",\r\n\tDragEnd = \"drag-end\",\r\n\tDrop = \"drop\",\r\n\tPaste = \"paste\",\r\n}\r\n\r\n/**\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\r\n */\r\nexport interface DrawImageArgs {\r\n\tsx: number;\r\n\tsy: number;\r\n\tsWidth: number;\r\n\tsHeight: number;\r\n\tdx: number;\r\n\tdy: number;\r\n\tdWidth: number;\r\n\tdHeight: number;\r\n}\r\n\r\nexport interface Dimensions {\r\n\twidth: number;\r\n\theight: number;\r\n}\r\n\r\nexport function resizeImg(\r\n\tfile: VTransmitFile,\r\n\tdims: Dimensions\r\n): DrawImageArgs {\r\n\t// 's' variables are for source\r\n\t// 'd' variables are for destination\r\n\tconst sRatio = file.width / file.height;\r\n\tconst dRatio = dims.width / dims.height;\r\n\tconst coords: DrawImageArgs = {\r\n\t\tsx: 0,\r\n\t\tsy: 0,\r\n\t\tsWidth: file.width,\r\n\t\tsHeight: file.height,\r\n\t\tdx: 0,\r\n\t\tdy: 0,\r\n\t\tdWidth: dims.width,\r\n\t\tdHeight: dims.height,\r\n\t};\r\n\r\n\tlet w, h;\r\n\tif (dRatio > sRatio) {\r\n\t\tw = file.width;\r\n\t\th = scaleH(dRatio, file.width);\r\n\t} else {\r\n\t\tw = scaleW(dRatio, file.height);\r\n\t\th = file.height;\r\n\t}\r\n\r\n\tif (w < file.width) {\r\n\t\tcoords.sx = (file.width - w) / 2;\r\n\t\tcoords.sWidth = w;\r\n\t}\r\n\tif (h < file.height) {\r\n\t\tcoords.sy = (file.height - h) / 2;\r\n\t\tcoords.sHeight = h;\r\n\t}\r\n\r\n\treturn coords;\r\n}\r\n\r\nexport function webkitIsFile(\r\n\tentry: WebKitFileEntry | WebKitDirectoryEntry\r\n): entry is WebKitFileEntry {\r\n\treturn entry.isFile;\r\n}\r\n\r\nexport function webkitIsDir(\r\n\tentry: WebKitFileEntry | WebKitDirectoryEntry\r\n): entry is WebKitDirectoryEntry {\r\n\treturn entry.isDirectory;\r\n}\r\n","import { uniqueId, round, toKbps, toMbps } from \"../core/utils\";\r\nimport { UploadStatuses } from \"../core/utils\";\r\n\r\nexport interface UploadStats {\r\n\tbytesSent: number;\r\n\tprogress: number;\r\n\ttotal: number;\r\n\tspeed: SpeedStats;\r\n\tstart: number;\r\n\tend: number;\r\n\ttime: number;\r\n}\r\n\r\nexport interface SpeedStats {\r\n\tkbps: number;\r\n\tmbps: number;\r\n}\r\n\r\nexport class VTransmitFile {\r\n\tprivate _dataUrl: string = \"\";\r\n\t/**\r\n\t * The browser native file object obtained from the file input.\r\n\t */\r\n\tpublic nativeFile: File;\r\n\tpublic id: string = VTransmitFile.idFactory();\r\n\tpublic status: UploadStatuses = UploadStatuses.None;\r\n\tpublic accepted: boolean = false; // Passed all validation.\r\n\tpublic lastModified: number;\r\n\tpublic lastModifiedDate: Date;\r\n\tpublic name: string;\r\n\tpublic processing: boolean = false;\r\n\tpublic size: number;\r\n\tpublic type: string;\r\n\tpublic webkitRelativePath: USVString;\r\n\tpublic width: number = 0;\r\n\tpublic height: number = 0;\r\n\tpublic errorMessage: string = \"\";\r\n\tpublic thumbnailLoaded: boolean = false;\r\n\r\n\t/**\r\n\t * `adapterData` is data meant for use by an upload adapter only.\r\n\t */\r\n\tpublic driverData: AnyObject = {};\r\n\t/**\r\n\t * `meta` is a place to add custom properties.\r\n\t */\r\n\tpublic meta: AnyObject = {};\r\n\tpublic upload: UploadStats = {\r\n\t\tbytesSent: 0,\r\n\t\tprogress: 0,\r\n\t\ttotal: 0,\r\n\t\tspeed: {\r\n\t\t\tkbps: 0,\r\n\t\t\tmbps: 0,\r\n\t\t},\r\n\t\tstart: 0,\r\n\t\tend: 0,\r\n\t\ttime: 0,\r\n\t};\r\n\r\n\tconstructor(file: File) {\r\n\t\tthis.nativeFile = file;\r\n\t\tthis.lastModified = file.lastModified;\r\n\t\tthis.lastModifiedDate = file.lastModifiedDate;\r\n\t\tthis.name = file.name;\r\n\t\tthis.size = file.size;\r\n\t\tthis.type = file.type;\r\n\t\tthis.webkitRelativePath = file.webkitRelativePath;\r\n\t\tthis.upload.total = file.size;\r\n\t}\r\n\r\n\thandleProgress(e: ProgressEvent): void {\r\n\t\tthis.startProgress();\r\n\t\tconst total = e.total || this.upload.total;\r\n\t\tthis.upload.progress = Math.min(100, 100 * e.loaded / total);\r\n\t\tthis.upload.bytesSent = e.loaded;\r\n\t\tthis.upload.total = total;\r\n\t\tthis.upload.time = (Date.now() - this.upload.start) / 1000;\r\n\t\t// Recalculate the upload speed in bytes/sec\r\n\t\tthis.upload.speed.kbps = round(\r\n\t\t\ttoKbps(this.upload.bytesSent, this.upload.time)\r\n\t\t);\r\n\t\tthis.upload.speed.mbps = round(\r\n\t\t\ttoMbps(this.upload.bytesSent, this.upload.time)\r\n\t\t);\r\n\t\tif (this.upload.progress === 100) {\r\n\t\t\tthis.endProgress();\r\n\t\t}\r\n\t}\r\n\r\n\tstartProgress(): VTransmitFile {\r\n\t\t// Avoid starting twice\r\n\t\tif (!this.upload.start) {\r\n\t\t\tthis.upload.start = Date.now();\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tendProgress(): VTransmitFile {\r\n\t\t// Avoid ending twice\r\n\t\tif (!this.upload.end) {\r\n\t\t\tthis.upload.end = Date.now();\r\n\t\t\tthis.upload.time = (Date.now() - this.upload.start) / 1000;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget dataUrl() {\r\n\t\treturn this.thumbnailLoaded ? this._dataUrl : \"\";\r\n\t}\r\n\r\n\tset dataUrl(value) {\r\n\t\t// Use non-enumerable data url to avoid copying around large data sets\r\n\t\tObject.defineProperty(this, \"_dataUrl\", {\r\n\t\t\tvalue,\r\n\t\t\tenumerable: false,\r\n\t\t\tconfigurable: true,\r\n\t\t\twritable: true,\r\n\t\t});\r\n\t\tthis.thumbnailLoaded = true;\r\n\t}\r\n\r\n\tstatic idFactory() {\r\n\t\treturn uniqueId(\"vt_\");\r\n\t}\r\n}\r\n","import { VTransmitFile } from \"../classes/VTransmitFile\";\r\nimport { VTransmitUploadContext } from \"../classes/VTransmitUploadContext\";\r\nimport { DriverInterface, UploadResult } from \"..\";\r\nimport { VTransmitEvents, ErrType, is_function } from \"../core/utils\";\r\n\r\nexport type ParamName = string | ((file: VTransmitFile) => string);\r\nexport type StaticOrDynamic<T> = T | ((files: VTransmitFile[]) => T);\r\n\r\nfunction resolveStaticOrDynamic<T>(\r\n\tx: StaticOrDynamic<T>,\r\n\tfiles: VTransmitFile[]\r\n): T {\r\n\tif (is_function(x)) {\r\n\t\treturn x(files);\r\n\t}\r\n\r\n\treturn x;\r\n}\r\n\r\nexport enum ParamNameStyle {\r\n\tEmpty,\r\n\tIndexed,\r\n\tBrackets,\r\n}\r\n\r\n/**\r\n * Responsibilities:\r\n * - send and manage upload via transport\r\n * - on progress: emit progress stats\r\n * - on error: emit to vue-transmit & update file status\r\n * - on timeout: emit to vue-transmit & update file status\r\n * - on error: emit to vue-transmit & update file status\r\n * - on success: emit to vue-transmit & update file status\r\n * - once complete: emit to vue-transmit & update file status\r\n */\r\nexport type AxiosDriverOptions<T = any> = {\r\n\t/**\r\n\t * A string representing the URL to send the request to\r\n\t * or a function called with an array of files for the upload\r\n\t * that returns a string url.\r\n\t */\r\n\turl: StaticOrDynamic<string>;\r\n\t/**\r\n\t * The HTTP method to use, such as \"GET\", \"POST\", \"PUT\", \"DELETE\", etc.\r\n\t * Ignored for non-HTTP(S) URLs.\r\n\t *\r\n\t * ```\r\n\t * // default => \"post\"\r\n\t * ```\r\n\t */\r\n\tmethod?: StaticOrDynamic<string>;\r\n\t/**\r\n\t * The XMLHttpRequest.withCredentials property is a Boolean that indicates\r\n\t * whether or not cross-site Access-Control requests should be made using\r\n\t * credentials such as cookies, authorization headers or TLS client\r\n\t * certificates. Setting withCredentials has no effect on same-site requests.\r\n\t */\r\n\twithCredentials?: StaticOrDynamic<boolean>;\r\n\t/**\r\n\t * The XMLHttpRequest.timeout property is an unsigned long representing the\r\n\t * number of milliseconds a request can take before automatically being\r\n\t * terminated. The default value is 0, which means there is no timeout.\r\n\t * Timeout shouldn't be used for synchronous XMLHttpRequests requests used in\r\n\t * a document environment or it will throw an InvalidAccessError exception.\r\n\t * When a timeout happens, a timeout event is fired.\r\n\t */\r\n\ttimeout?: StaticOrDynamic<number>;\r\n\t/**\r\n\t * The name of the file param that gets transferred.\r\n\t */\r\n\tparamName?: ParamName;\r\n\t/**\r\n\t * The param name syntax for multiple uploads.\r\n\t *\r\n\t * **Options:**\r\n\t * - `0 (Empty)` _(Default)_ Adds nothing to the paramName: `file`\r\n\t * - `1 (Indexed)` Adds the array index of the file: `file[0]`\r\n\t * - `2 (Brackets)` Adds the array-like brackets without index: `file[]`\r\n\t */\r\n\tmultipleParamNameStyle?: ParamNameStyle;\r\n\t/**\r\n\t * An object of additional parameters to transfer to the server.\r\n\t * This is the same as adding hidden input fields in the form element.\r\n\t */\r\n\tparams?: StaticOrDynamic<Dictionary<string>>;\r\n\theaders?: StaticOrDynamic<Dictionary<string>>;\r\n\t/**\r\n\t * The XMLHttpRequest.responseType property is an enumerated value that\r\n\t * returns the type of response. It also lets the author change the response\r\n\t * type. If an empty string is set as the value of responseType, the default\r\n\t * value text will be used.\r\n\t *\r\n\t * Setting the value of responseType to \"document\" is ignored if done in a\r\n\t * Worker environment. When setting responseType to a particular value,\r\n\t * the author should make sure that the server is actually sending a response\r\n\t * compatible to that format. If the server returns data that is not\r\n\t * compatible to the responseType that was set, the value of response will be\r\n\t * null. Also, setting responseType for synchronous requests will throw an\r\n\t * InvalidAccessError exception.\r\n\t */\r\n\tresponseType?: StaticOrDynamic<XMLHttpRequestResponseType>;\r\n\t/**\r\n\t * responseParseFunc is a function that given an XMLHttpRequest\r\n\t * returns a response object. Allows for custom response parsing.\r\n\t */\r\n\tresponseParseFunc?: (xhr: XMLHttpRequest) => T;\r\n\terrUploadError?: (xhr: XMLHttpRequest) => string;\r\n\terrUploadTimeout?: (xhr: XMLHttpRequest) => string;\r\n\trenameFile?: (name: string) => string;\r\n\thttp: any;\r\n};\r\n\r\nexport type XHRUploadGroup = {\r\n\tid: number;\r\n\tfiles: VTransmitFile[];\r\n\txhr: XMLHttpRequest;\r\n};\r\n\r\nlet group_id = 0;\r\n\r\nexport class AxiosDriver<T = any> implements DriverInterface {\r\n\tpublic context: VTransmitUploadContext;\r\n\tpublic url: StaticOrDynamic<string>;\r\n\tpublic method: StaticOrDynamic<string>;\r\n\tpublic withCredentials: StaticOrDynamic<boolean>;\r\n\tpublic timeout: StaticOrDynamic<number>;\r\n\tpublic paramName: ParamName;\r\n\tpublic multipleParamNameStyle: ParamNameStyle;\r\n\tpublic params: StaticOrDynamic<Dictionary<string>>;\r\n\tpublic headers: StaticOrDynamic<Dictionary<string>>;\r\n\tpublic responseType: StaticOrDynamic<XMLHttpRequestResponseType>;\r\n\tpublic errUploadError: (xhr: XMLHttpRequest) => string;\r\n\tpublic errUploadTimeout: (xhr: XMLHttpRequest) => string;\r\n\tpublic renameFile: (name: string) => string;\r\n\tpublic responseParseFunc?: (xhr: XMLHttpRequest) => T;\r\n\tpublic http: any;\r\n\r\n\tprivate uploadGroups: { [key: number]: XHRUploadGroup } = Object.create(\r\n\t\tnull\r\n\t);\r\n\r\n\tconstructor(\r\n\t\tcontext: VTransmitUploadContext,\r\n\t\toptions: AxiosDriverOptions<T>\r\n\t) {\r\n\t\tlet {\r\n\t\t\turl,\r\n\t\t\tmethod = \"post\",\r\n\t\t\twithCredentials = false,\r\n\t\t\ttimeout = 0,\r\n\t\t\tparamName = \"file\",\r\n\t\t\tmultipleParamNameStyle = ParamNameStyle.Empty,\r\n\t\t\tparams = Object.create(null),\r\n\t\t\theaders = {\r\n\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t\"Cache-Control\": \"no-cache\",\r\n\t\t\t\t\"X-Requested-With\": \"XMLHttpRequest\",\r\n\t\t\t},\r\n\t\t\tresponseType = \"json\",\r\n\t\t\tresponseParseFunc,\r\n\t\t\terrUploadError = (xhr: XMLHttpRequest) =>\r\n\t\t\t\t`Error during upload: ${xhr.statusText} [${xhr.status}]`,\r\n\t\t\terrUploadTimeout = (_xhr: XMLHttpRequest) =>\r\n\t\t\t\t`Error during upload: the server timed out.`,\r\n\t\t\trenameFile = (name: string) => name,\r\n\t\t\thttp,\r\n\t\t} = options;\r\n\r\n\t\tif (!url) {\r\n\t\t\tthrow new TypeError(\r\n\t\t\t\t`${\r\n\t\t\t\t\tthis.constructor.name\r\n\t\t\t\t} requires a 'url' parameter. Supply a string or a function returning a string.`\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.context = context;\r\n\t\tthis.url = url;\r\n\t\tthis.method = method;\r\n\t\tthis.withCredentials = withCredentials;\r\n\t\tthis.timeout = timeout;\r\n\t\tthis.paramName = paramName;\r\n\t\tthis.multipleParamNameStyle = multipleParamNameStyle;\r\n\t\tthis.params = params;\r\n\t\tthis.headers = headers;\r\n\t\tthis.responseType = responseType;\r\n\t\tthis.responseParseFunc = responseParseFunc;\r\n\t\tthis.errUploadError = errUploadError;\r\n\t\tthis.errUploadTimeout = errUploadTimeout;\r\n\t\tthis.renameFile = renameFile;\r\n\t\tthis.http = http;\r\n\t}\r\n\r\n\tuploadFiles(files: VTransmitFile[]): Promise<UploadResult<T>> {\r\n\t\treturn new Promise(resolve => {\r\n\t\t\tif (!this.url) {\r\n\t\t\t\treturn resolve({\r\n\t\t\t\t\tok: false,\r\n\t\t\t\t\terr: {\r\n\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\tmessage: `Missing upload URL.`,\r\n\t\t\t\t\t\tdata: this.url,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\t//const updateProgress = this.handleUploadProgress(files);\r\n\t\t\tconst id = group_id++;\r\n\t\t\tconst params = resolveStaticOrDynamic(this.params, files);\r\n\r\n\t\t\tthis.uploadGroups[id] = { id, xhr, files };\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tfile.driverData.groupID = id;\r\n\t\t\t\tfile.startProgress();\r\n\t\t\t}\r\n\r\n\t\t\tconst formData = new FormData();\r\n\t\t\tfor (const key of Object.keys(params)) {\r\n\t\t\t\tformData.append(key, params[key]);\r\n\t\t\t}\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tthis.context.emit(VTransmitEvents.Sending, file, xhr, formData);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.context.props.uploadMultiple) {\r\n\t\t\t\tthis.context.emit(\r\n\t\t\t\t\tVTransmitEvents.SendingMultiple,\r\n\t\t\t\t\tfiles,\r\n\t\t\t\t\txhr,\r\n\t\t\t\t\tformData\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0, len = files.length; i < len; i++) {\r\n\t\t\t\tformData.append(\r\n\t\t\t\t\tthis.getParamName(files[i], i),\r\n\t\t\t\t\tfiles[i].nativeFile,\r\n\t\t\t\t\tthis.renameFile(files[i].name)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tthis.http({\r\n\t\t\t\turl: this.url,\r\n\t\t\t\tbody: formData,\r\n\t\t\t\ttimeout: this.timeout,\r\n\t\t\t\twithCredentials: this.withCredentials,\r\n\t\t\t\tonUploadProgress: function(progressEvent?: ProgressEvent) {\r\n\t\t\t\t\tthis.handleProgress(progressEvent);\r\n\t\t\t\t},\r\n\t\t\t\tsuccess: function(response: any) {\r\n\t\t\t\t\treturn resolve({\r\n\t\t\t\t\t\tok: true,\r\n\t\t\t\t\t\tdata: response,\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\terror: function(error: any) {\r\n\t\t\t\t\treturn resolve({\r\n\t\t\t\t\t\tok: false,\r\n\t\t\t\t\t\terr: {\r\n\t\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\t\tmessage: error.response.data.message,\r\n\t\t\t\t\t\t\tdata: xhr,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\thandleUploadProgress(files: VTransmitFile[]): (e?: ProgressEvent) => void {\r\n\t\tconst vm = this.context.vtransmit;\r\n\r\n\t\treturn function onProgressFn(e?: ProgressEvent): void {\r\n\t\t\tif (!e) {\r\n\t\t\t\tlet allFilesFinished = true;\r\n\r\n\t\t\t\tfor (const file of files) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tfile.upload.progress !== 100 ||\r\n\t\t\t\t\t\tfile.upload.bytesSent !== file.upload.total\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tallFilesFinished = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfile.upload.progress = 100;\r\n\t\t\t\t\tfile.upload.bytesSent = file.upload.total;\r\n\t\t\t\t\tfile.endProgress();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (allFilesFinished) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tif (e) {\r\n\t\t\t\t\tfile.handleProgress(e);\r\n\t\t\t\t}\r\n\t\t\t\tvm.$emit(\r\n\t\t\t\t\tVTransmitEvents.UploadProgress,\r\n\t\t\t\t\tfile,\r\n\t\t\t\t\tfile.upload.progress,\r\n\t\t\t\t\tfile.upload.bytesSent\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tgetParamName(file: VTransmitFile, index: string | number): string {\r\n\t\tlet paramName: string;\r\n\t\tif (is_function(this.paramName)) {\r\n\t\t\tparamName = this.paramName(file);\r\n\t\t} else {\r\n\t\t\tparamName = this.paramName;\r\n\t\t}\r\n\r\n\t\tif (!this.context.props.uploadMultiple) {\r\n\t\t\treturn paramName;\r\n\t\t}\r\n\r\n\t\tswitch (this.multipleParamNameStyle) {\r\n\t\t\tcase ParamNameStyle.Indexed:\r\n\t\t\t\tparamName += `[${index}]`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ParamNameStyle.Brackets:\r\n\t\t\t\tparamName += `[]`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ParamNameStyle.Empty:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn paramName;\r\n\t}\r\n\r\n\tcancelUpload(file: VTransmitFile): VTransmitFile[] {\r\n\t\tlet group = this.uploadGroups[file.driverData.groupID];\r\n\t\tif (!group) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tgroup.xhr.abort();\r\n\t\tthis.rmGroup(file.driverData.groupID);\r\n\r\n\t\treturn [...group.files];\r\n\t}\r\n\r\n\trmGroup(id: number) {\r\n\t\tdelete this.uploadGroups[id];\r\n\t}\r\n}\r\n","import VueTransmit from \"../components/VueTransmit.vue\";\r\nimport { VTransmitFile } from \"./VTransmitFile\";\r\nimport { UploadStatuses } from \"../core/utils\";\r\n\r\nexport class VTransmitUploadContext {\r\n\tpublic Statuses = UploadStatuses;\r\n\tpublic props: AnyObject;\r\n\r\n\tconstructor(public vtransmit: VueTransmit) {\r\n\t\tthis.props = vtransmit.$props;\r\n\t}\r\n\r\n\tpublic emit(event: string, ...args: any[]) {\r\n\t\tthis.vtransmit.$emit(event, ...args);\r\n\t}\r\n\r\n\tpublic get acceptedFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).acceptedFiles;\r\n\t}\r\n\r\n\tpublic get rejectedFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).rejectedFiles;\r\n\t}\r\n\r\n\tpublic get addedFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).addedFiles;\r\n\t}\r\n\r\n\tpublic get queuedFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).queuedFiles;\r\n\t}\r\n\r\n\tpublic get uploadingFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).uploadingFiles;\r\n\t}\r\n\r\n\tpublic get activeFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).activeFiles;\r\n\t}\r\n}\r\n","<template>\r\n   <component :is=\"tag\">\r\n      <slot v-if=\"filesSlotFirst\"\r\n            name=\"files\"\r\n            v-bind=\"fileSlotBindings\" />\r\n      <div class=\"v-transmit__upload-area\"\r\n           :class=\"[isDraggingClass, uploadAreaClasses]\"\r\n           :draggable=\"!disableDraggable\"\r\n           v-bind=\"uploadAreaAttrs\"\r\n           v-on=\"uploadAreaListeners\"\r\n           @click=\"handleClickUploaderAction\"\r\n           @dragstart=\"handleDragStart\"\r\n           @dragend=\"handleDragEnd\"\r\n           @dragenter.prevent.stop=\"handleDragEnter\"\r\n           @dragover.prevent.stop=\"handleDragOver\"\r\n           @dragleave=\"handleDragLeave\"\r\n           @drop.prevent.stop=\"handleDrop\">\r\n         <slot></slot>\r\n      </div>\r\n      <slot v-if=\"!filesSlotFirst\"\r\n            name=\"files\"\r\n            v-bind=\"fileSlotBindings\" />\r\n      <form :style=\"formStyles\"\r\n            ref=\"uploadForm\">\r\n         <input type=\"file\"\r\n                ref=\"hiddenFileInput\"\r\n                :multiple=\"multiple\"\r\n                :class=\"[maxFilesReachedClass]\"\r\n                :accept=\"filesToAccept\"\r\n                :capture=\"capture\"\r\n                @change=\"onFileInputChange\">\r\n      </form>\r\n   </component :is=\"tag\">\r\n</template>\r\n\r\n<style>\r\n.v-transmit__upload-area {\r\n\twidth: 100%;\r\n\tborder-radius: 1rem;\r\n\tborder: 2px dashed #bdbdbd;\r\n\tmin-height: 30vh;\r\n}\r\n\r\n@media (min-height: 1000px) {\r\n\t.v-transmit__upload-area {\r\n\t\tmin-height: 300px;\r\n\t}\r\n}\r\n\r\n.v-transmit__upload-area--is-dragging {\r\n\tbackground: #e1f5fe\r\n\t\tlinear-gradient(\r\n\t\t\t-45deg,\r\n\t\t\t#fafafa 25%,\r\n\t\t\ttransparent 25%,\r\n\t\t\ttransparent 50%,\r\n\t\t\t#fafafa 50%,\r\n\t\t\t#fafafa 75%,\r\n\t\t\ttransparent 75%,\r\n\t\t\ttransparent\r\n\t\t);\r\n\tbackground-size: 40px 40px;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\n// @ts-ignore\r\nimport Vue, { VueConstructor } from \"vue\";\r\nimport {\r\n\tNewObject,\r\n\tnoop,\r\n\tresizeImg,\r\n\twebkitIsFile,\r\n\twebkitIsDir,\r\n\tUploadStatuses,\r\n\tVTransmitEvents,\r\n\tround,\r\n\texpectNever,\r\n\tErrType,\r\n} from \"../core/utils\";\r\nimport { VTransmitFile } from \"../classes/VTransmitFile\";\r\nimport { VTransmitUploadContext } from \"../classes/VTransmitUploadContext\";\r\nimport { AxiosDriver } from \"../upload-drivers/axios\";\r\nimport { DriverInterface, DriverConstructor } from \"../core/interfaces\";\r\n\r\ntype FileSystemEntry = WebKitFileEntry | WebKitDirectoryEntry;\r\n\r\nexport default Vue.extend({\r\n\tname: \"VueTransmit\",\r\n\r\n\tprops: {\r\n\t\ttag: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"div\",\r\n\t\t},\r\n\t\tdisableDraggable: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\tuploadAreaClasses: {\r\n\t\t\ttype: [Array, Object, String],\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\tuploadAreaAttrs: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: NewObject,\r\n\t\t},\r\n\t\tuploadAreaListeners: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: NewObject,\r\n\t\t},\r\n\t\tdragClass: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\tfilesSlotFirst: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Sets the maximum number of uploads that can be running at a given time.\r\n\t\t */\r\n\t\tmaxConcurrentUploads: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 2,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Whether to send multiple files in one request.\r\n\t\t */\r\n\t\tuploadMultiple: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Size in MB by default, or MiB if useBinarySizeBase == true\r\n\t\t */\r\n\t\tmaxFileSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 256,\r\n\t\t},\r\n\t\t/**\r\n\t\t * By default, a base 10 size is used. This corresponds to KB, MB, GB, etc.\r\n\t\t * If this property is true, a binary base will be used. This would\r\n\t\t * correspond to KiB, MiB, GiB.\r\n\t\t *\r\n\t\t * Base 10: `1000 ** x` where `x` equal 1(KB), 2(MB), 3(GB), etc.\r\n\t\t *\r\n\t\t * Base 2: `1 << x` where `x` equal 10(KiB), 20(MiB), 30(GiB), etc.\r\n\t\t */\r\n\t\tuseBinarySizeBase: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\tcreateImageThumbnails: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t// in MB. When the filename exceeds this limit, the thumbnail will not be generated.\r\n\t\tmaxThumbnailFileSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 10,\r\n\t\t},\r\n\t\tthumbnailWidth: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 120,\r\n\t\t},\r\n\t\tthumbnailHeight: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 120,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Can be used to limit the maximum number of files that will be handled\r\n\t\t * by this Dropzone\r\n\t\t */\r\n\t\tmaxFiles: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\t/**\r\n\t\t * If true, the dropzone will present a file selector when clicked.\r\n\t\t */\r\n\t\tclickable: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Whether dot files in directories should be ignored.\r\n\t\t */\r\n\t\tignoreHiddenFiles: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t/**\r\n\t\t * You can set accepted mime types here.\r\n\t\t *\r\n\t\t * The default implementation of the `accept()` function will check this\r\n\t\t * property, and if the Dropzone is clickable this will be used as\r\n\t\t * `accept` attribute.\r\n\t\t *\r\n\t\t * This is a comma separated list of mime types or extensions. E.g.:\r\n\t\t * - audio/*,video/*,image/png,.pdf\r\n\t\t *\r\n\t\t * See https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept\r\n\t\t * for a reference.\r\n\t\t */\r\n\t\tacceptedFileTypes: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault() {\r\n\t\t\t\treturn [];\r\n\t\t\t},\r\n\t\t},\r\n\t\t/**\r\n\t\t * If false, files will be added to the queue but the queue will not be\r\n\t\t * processed automatically.\r\n\t\t * This can be useful if you need some additional user input before sending\r\n\t\t * files (or if you want want all files sent at once).\r\n\t\t * If you're ready to send the file simply call myDropzone.processQueue()\r\n\t\t */\r\n\t\tautoProcessQueue: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t/**\r\n\t\t * If false, files added to the dropzone will not be queued by default.\r\n\t\t * You'll have to call `enqueueFile(file)` manually.\r\n\t\t */\r\n\t\tautoQueue: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t/**\r\n\t\t * If null, no capture type will be specified\r\n\t\t * If camera, mobile devices will skip the file selection and choose camera\r\n\t\t * If microphone, mobile devices will skip the file selection and choose the microphone\r\n\t\t * If camcorder, mobile devices will skip the file selection and choose the camera in video mode\r\n\t\t * On apple devices multiple must be set to false.  AcceptedFiles may need to\r\n\t\t * be set to an appropriate mime type (e.g. \"image/*\", \"audio/*\", or \"video/*\").\r\n\t\t */\r\n\t\tcapture: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\t// If the file size is too big.\r\n\t\terrMaxFileSizeExceeded: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault(fileSize: number, maxFileSize: number, units: string) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t`The file is too big (${round(fileSize, 1)}${units}).` +\r\n\t\t\t\t\t` Max file size: ${round(maxFileSize, 1)}${units}.`\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t},\r\n\t\terrInvalidFileType: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault(type: string, _acceptedTypes: string[], _file: VTransmitFile) {\r\n\t\t\t\treturn `You can't upload files of this type: ${type}`;\r\n\t\t\t},\r\n\t\t},\r\n\t\terrMaxFilesExceeded: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault(maxFiles: number) {\r\n\t\t\t\treturn `You can not upload any more files (${maxFiles} max).`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t/**\r\n\t\t * If `done()` is called without argument the file is accepted\r\n\t\t * If you call it with an error message, the file is rejected\r\n\t\t * (This allows for asynchronous validation).\r\n\t\t */\r\n\t\taccept: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault(_file: VTransmitFile, done: Function) {\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t},\r\n\t\tresize: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault: resizeImg,\r\n\t\t},\r\n\t\tdriverOptions: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: NewObject,\r\n\t\t},\r\n\t\tdriver: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault: AxiosDriver,\r\n\t\t},\r\n\t},\r\n\r\n\tmounted() {\r\n\t\tthis.$on(VTransmitEvents.UploadProgress, this.updateTotalUploadProgress);\r\n\t\tthis.$on(VTransmitEvents.RemovedFile, this.updateTotalUploadProgress);\r\n\t\tthis.$on(VTransmitEvents.Canceled, (file: VTransmitFile) =>\r\n\t\t\tthis.$emit(VTransmitEvents.Complete, file)\r\n\t\t);\r\n\t\tthis.$on(VTransmitEvents.Complete, (file: VTransmitFile) => {\r\n\t\t\tif (\r\n\t\t\t\tthis.addedFiles.length === 0 &&\r\n\t\t\t\tthis.uploadingFiles.length === 0 &&\r\n\t\t\t\tthis.queuedFiles.length === 0\r\n\t\t\t) {\r\n\t\t\t\tPromise.resolve().then(() =>\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.QueueComplete, file)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t\twindow.addEventListener(\"paste\", <any>this.handlePaste);\r\n\r\n\t\tthis.$emit(VTransmitEvents.Initialize, this);\r\n\t},\r\n\r\n\tbeforeDestroy() {\r\n\t\twindow.removeEventListener(\"paste\", <any>this.handlePaste);\r\n\t},\r\n\r\n\tdata(): {\r\n\t\tdragging: boolean;\r\n\t\tprocessingThumbnail: boolean;\r\n\t\tthumbnailQueue: VTransmitFile[];\r\n\t\tfiles: VTransmitFile[];\r\n\t\tdefaultHeaders: { [key: string]: string };\r\n\t\tformStyles: { [key: string]: string };\r\n\t} {\r\n\t\treturn {\r\n\t\t\tdragging: false,\r\n\t\t\t// Used to keep the createThumbnail calls processing async one-at-a-time\r\n\t\t\tprocessingThumbnail: false,\r\n\t\t\tthumbnailQueue: [],\r\n\t\t\tfiles: [],\r\n\t\t\tdefaultHeaders: {\r\n\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t\"Cache-Control\": \"no-cache\",\r\n\t\t\t\t\"X-Requested-With\": \"XMLHttpRequest\",\r\n\t\t\t},\r\n\t\t\tformStyles: {\r\n\t\t\t\tvisibility: \"hidden !important\",\r\n\t\t\t\tposition: \"absolute !important\",\r\n\t\t\t\ttop: \"0 !important\",\r\n\t\t\t\tleft: \"0 !important\",\r\n\t\t\t\theight: \"0px !important\",\r\n\t\t\t\twidth: \"0px !important\",\r\n\t\t\t},\r\n\t\t};\r\n\t},\r\n\r\n\tcomputed: {\r\n\t\tinputEl(): HTMLInputElement | null {\r\n\t\t\tlet el = this.$refs.hiddenFileInput;\r\n\t\t\tif (!(el instanceof HTMLInputElement)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\treturn el;\r\n\t\t},\r\n\t\tformEl(): HTMLFormElement | null {\r\n\t\t\tlet el = this.$refs.uploadForm;\r\n\t\t\tif (!(el instanceof HTMLFormElement)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\treturn el;\r\n\t\t},\r\n\t\tfileSizeBase(): number {\r\n\t\t\tif (this.useBinarySizeBase) {\r\n\t\t\t\treturn 1024;\r\n\t\t\t}\r\n\r\n\t\t\treturn 1000;\r\n\t\t},\r\n\t\tmaxFileSizeBytes(): number {\r\n\t\t\treturn this.maxFileSize * this.fileSizeBase * this.fileSizeBase;\r\n\t\t},\r\n\t\tfilesToAccept(): string {\r\n\t\t\treturn this.acceptedFileTypes.join(\",\");\r\n\t\t},\r\n\t\tmultiple(): boolean {\r\n\t\t\treturn this.maxFiles === null || this.maxFiles > 1;\r\n\t\t},\r\n\t\taddedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Added);\r\n\t\t},\r\n\t\tqueuedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Queued);\r\n\t\t},\r\n\t\tacceptedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.files.filter(f => f.accepted);\r\n\t\t},\r\n\t\trejectedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.files.filter(f => !f.accepted);\r\n\t\t},\r\n\t\tuploadingFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Uploading);\r\n\t\t},\r\n\t\tcanceledFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Canceled);\r\n\t\t},\r\n\t\tfailedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Error);\r\n\t\t},\r\n\t\ttimeoutFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Timeout);\r\n\t\t},\r\n\t\tsuccessfulFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Success);\r\n\t\t},\r\n\t\tactiveFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(\r\n\t\t\t\tUploadStatuses.Uploading,\r\n\t\t\t\tUploadStatuses.Queued\r\n\t\t\t);\r\n\t\t},\r\n\t\tmaxFilesReached(): boolean {\r\n\t\t\treturn (\r\n\t\t\t\tthis.maxFiles != null && this.acceptedFiles.length >= this.maxFiles\r\n\t\t\t);\r\n\t\t},\r\n\t\tmaxFilesReachedClass(): string | null {\r\n\t\t\treturn this.maxFilesReached ? \"v-transmit__max-files--reached\" : null;\r\n\t\t},\r\n\t\tisDraggingClass(): Dictionary<boolean> {\r\n\t\t\treturn {\r\n\t\t\t\t\"v-transmit__upload-area--is-dragging\": this.dragging,\r\n\t\t\t\t[this.dragClass]: this.dragging,\r\n\t\t\t};\r\n\t\t},\r\n\t\tisUploading(): boolean {\r\n\t\t\treturn this.uploadingFiles.length > 0;\r\n\t\t},\r\n\t\tfileSlotBindings(): {\r\n\t\t\tfiles: VTransmitFile[];\r\n\t\t\tacceptedFiles: VTransmitFile[];\r\n\t\t\trejectedFiles: VTransmitFile[];\r\n\t\t\taddedFiles: VTransmitFile[];\r\n\t\t\tqueuedFiles: VTransmitFile[];\r\n\t\t\tuploadingFiles: VTransmitFile[];\r\n\t\t\tcanceledFiles: VTransmitFile[];\r\n\t\t\tfailedFiles: VTransmitFile[];\r\n\t\t\ttimeoutFiles: VTransmitFile[];\r\n\t\t\tsuccessfulFiles: VTransmitFile[];\r\n\t\t\tactiveFiles: VTransmitFile[];\r\n\t\t\tisUploading: boolean;\r\n\t\t} {\r\n\t\t\treturn {\r\n\t\t\t\tfiles: this.files,\r\n\t\t\t\tacceptedFiles: this.acceptedFiles,\r\n\t\t\t\trejectedFiles: this.rejectedFiles,\r\n\t\t\t\taddedFiles: this.addedFiles,\r\n\t\t\t\tqueuedFiles: this.queuedFiles,\r\n\t\t\t\tuploadingFiles: this.uploadingFiles,\r\n\t\t\t\tcanceledFiles: this.canceledFiles,\r\n\t\t\t\tfailedFiles: this.failedFiles,\r\n\t\t\t\ttimeoutFiles: this.timeoutFiles,\r\n\t\t\t\tsuccessfulFiles: this.successfulFiles,\r\n\t\t\t\tactiveFiles: this.activeFiles,\r\n\t\t\t\tisUploading: this.isUploading,\r\n\t\t\t};\r\n\t\t},\r\n\t\ttransport(): DriverInterface {\r\n\t\t\tlet Driver: DriverConstructor = <any>this.driver;\r\n\t\t\ttry {\r\n\t\t\t\treturn new Driver(\r\n\t\t\t\t\tnew VTransmitUploadContext(this),\r\n\t\t\t\t\tthis.driverOptions\r\n\t\t\t\t);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(`[vue-transmit] Error resolving upload driver:`, err);\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\twatch: {\r\n\t\tacceptedFiles(acceptedFiles: VTransmitFile[]) {\r\n\t\t\tif (this.maxFiles == null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (acceptedFiles.length >= this.maxFiles) {\r\n\t\t\t\tthis.$emit(VTransmitEvents.MaxFilesReached, this.files);\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tmethods: {\r\n\t\tgetFilesWithStatus(...statuses: UploadStatuses[]): VTransmitFile[] {\r\n\t\t\treturn this.files.filter(f => statuses.indexOf(f.status) > -1);\r\n\t\t},\r\n\t\tonFileInputChange(): void {\r\n\t\t\tlet { inputEl, formEl } = this;\r\n\t\t\tif (inputEl == null || formEl == null) {\r\n\t\t\t\t// This is unreachable code,\r\n\t\t\t\t// but we need to let TS know it.\r\n\t\t\t\tthrow TypeError();\r\n\t\t\t}\r\n\r\n\t\t\t// Can be null\r\n\t\t\tif (!inputEl.files) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.$emit(\r\n\t\t\t\tVTransmitEvents.AddedFiles,\r\n\t\t\t\tArray.from(inputEl.files).map(this.addFile)\r\n\t\t\t);\r\n\r\n\t\t\t// Reset input element's files\r\n\t\t\t// https://github.com/alexsasharegan/vue-transmit/issues/25\r\n\t\t\tformEl.reset();\r\n\t\t},\r\n\t\taddFile(file: File): VTransmitFile {\r\n\t\t\tconst vtFile = new VTransmitFile(file);\r\n\t\t\tvtFile.status = UploadStatuses.Added;\r\n\t\t\tthis.files.push(vtFile);\r\n\t\t\tthis.$emit(VTransmitEvents.AddedFile, vtFile);\r\n\t\t\tthis.enqueueThumbnail(vtFile);\r\n\t\t\tthis.acceptFile(vtFile, (error?: string) => {\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\tvtFile.accepted = false;\r\n\t\t\t\t\tthis.errorProcessing([vtFile], error);\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.RejectedFile, vtFile);\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.AcceptComplete, vtFile);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvtFile.accepted = true;\r\n\t\t\t\tthis.$emit(VTransmitEvents.AcceptedFile, vtFile);\r\n\t\t\t\tthis.$emit(VTransmitEvents.AcceptComplete, vtFile);\r\n\t\t\t\tif (this.autoQueue) {\r\n\t\t\t\t\tthis.enqueueFile(vtFile);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn vtFile;\r\n\t\t},\r\n\t\tacceptFile(file: VTransmitFile, done: (err?: string) => void): void {\r\n\t\t\t// File size check\r\n\t\t\tif (file.size > this.maxFileSizeBytes) {\r\n\t\t\t\t// size is in bytes, base is kilo multiplier, so base * base == mega\r\n\t\t\t\tlet mega = this.fileSizeBase * this.fileSizeBase;\r\n\t\t\t\tlet fileSize = file.size / mega;\r\n\t\t\t\tlet units = \"MB\";\r\n\t\t\t\tif (this.useBinarySizeBase) {\r\n\t\t\t\t\tunits = \"MiB\";\r\n\t\t\t\t}\r\n\t\t\t\treturn done(\r\n\t\t\t\t\tthis.errMaxFileSizeExceeded(fileSize, this.maxFileSize, units)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// File type check\r\n\t\t\tif (!this.isValidFileType(file, this.acceptedFileTypes)) {\r\n\t\t\t\treturn done(\r\n\t\t\t\t\tthis.errInvalidFileType(file.type, this.acceptedFileTypes, file)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// Upload limit check\r\n\t\t\tif (\r\n\t\t\t\tthis.maxFiles != null &&\r\n\t\t\t\tthis.acceptedFiles.length >= this.maxFiles\r\n\t\t\t) {\r\n\t\t\t\tthis.$emit(VTransmitEvents.MaxFilesExceeded, file);\r\n\t\t\t\treturn done(this.errMaxFilesExceeded(this.maxFiles));\r\n\t\t\t}\r\n\r\n\t\t\t// Happy path 😀\r\n\t\t\tthis.accept(file, done);\r\n\t\t},\r\n\t\tremoveFile(file: VTransmitFile): void {\r\n\t\t\tif (file.status === UploadStatuses.Uploading) {\r\n\t\t\t\tthis.cancelUpload(file);\r\n\t\t\t}\r\n\t\t\tconst idxToRm = this.files.findIndex(f => f.id === file.id);\r\n\t\t\tif (idxToRm > -1) {\r\n\t\t\t\tthis.$emit(\r\n\t\t\t\t\tVTransmitEvents.RemovedFile,\r\n\t\t\t\t\tthis.files.splice(idxToRm, 1)[0]\r\n\t\t\t\t);\r\n\t\t\t\tif (this.files.length === 0) {\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.Reset);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tremoveFilesWithStatus(...statuses: UploadStatuses[]): void {\r\n\t\t\tthis.getFilesWithStatus(...statuses).map(this.removeFile);\r\n\t\t},\r\n\t\tremoveAllFiles(cancelInProgressUploads = false): void {\r\n\t\t\tthis.files\r\n\t\t\t\t.filter(\r\n\t\t\t\t\tf =>\r\n\t\t\t\t\t\tf.status !== UploadStatuses.Uploading ||\r\n\t\t\t\t\t\tcancelInProgressUploads\r\n\t\t\t\t)\r\n\t\t\t\t.map(this.removeFile);\r\n\t\t},\r\n\t\ttriggerBrowseFiles(): void {\r\n\t\t\tif (this.inputEl) {\r\n\t\t\t\tthis.inputEl.click();\r\n\t\t\t}\r\n\t\t},\r\n\t\thandleClickUploaderAction(): void {\r\n\t\t\tif (this.clickable) {\r\n\t\t\t\tthis.triggerBrowseFiles();\r\n\t\t\t}\r\n\t\t},\r\n\t\tenqueueFile(file: VTransmitFile): void {\r\n\t\t\tif (file.status !== UploadStatuses.Added || file.accepted !== true) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\"This file can't be queued because it has already been processed or was rejected.\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tfile.status = UploadStatuses.Queued;\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\tPromise.resolve().then(this.processQueue);\r\n\t\t\t}\r\n\t\t},\r\n\t\tenqueueThumbnail(file: VTransmitFile): void {\r\n\t\t\tif (\r\n\t\t\t\t!this.createImageThumbnails ||\r\n\t\t\t\t!file.type.match(/image.*/) ||\r\n\t\t\t\tfile.size > this.maxThumbnailFileSize * 1024 * 1024\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.thumbnailQueue.push(file);\r\n\t\t\tPromise.resolve().then(this.processThumbnailQueue);\r\n\t\t},\r\n\t\tprocessThumbnailQueue(): void {\r\n\t\t\tlet file: VTransmitFile | undefined;\r\n\r\n\t\t\t// Employ a chain of self-calling, self-queuing createThumbnail calls\r\n\t\t\t// so execution can stay as non-blocking as possible.\r\n\t\t\tif (this.processingThumbnail || this.thumbnailQueue.length === 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.processingThumbnail = true;\r\n\t\t\tif ((file = this.thumbnailQueue.shift())) {\r\n\t\t\t\tthis.createThumbnail(file, () => {\r\n\t\t\t\t\tthis.processingThumbnail = false;\r\n\t\t\t\t\tthis.processThumbnailQueue();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\t\tcreateThumbnail(file: VTransmitFile, callback = noop): void {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.addEventListener(\r\n\t\t\t\t\"load\",\r\n\t\t\t\t() => {\r\n\t\t\t\t\tif (file.type === \"image/svg+xml\") {\r\n\t\t\t\t\t\tfile.dataUrl = reader.result;\r\n\t\t\t\t\t\tthis.$emit(VTransmitEvents.Thumbnail, file, reader.result);\r\n\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.createThumbnailFromUrl(file, reader.result, callback);\r\n\t\t\t\t},\r\n\t\t\t\tfalse\r\n\t\t\t);\r\n\r\n\t\t\t// FileReader requires a native File|Blob object\r\n\t\t\treader.readAsDataURL(file.nativeFile);\r\n\t\t},\r\n\t\tcreateThumbnailFromUrl(\r\n\t\t\tfile: VTransmitFile,\r\n\t\t\timageUrl: string,\r\n\t\t\tcallback?: Function\r\n\t\t): void {\r\n\t\t\tconst imgEl = document.createElement(\"img\");\r\n\r\n\t\t\timgEl.addEventListener(\r\n\t\t\t\t\"load\",\r\n\t\t\t\t() => {\r\n\t\t\t\t\tlet ctx: CanvasRenderingContext2D | null;\r\n\t\t\t\t\tfile.width = imgEl.width;\r\n\t\t\t\t\tfile.height = imgEl.height;\r\n\t\t\t\t\tconst resizeInfo = this.resize(file, {\r\n\t\t\t\t\t\twidth: this.thumbnailWidth,\r\n\t\t\t\t\t\theight: this.thumbnailHeight,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconst canvas = document.createElement(\"canvas\");\r\n\t\t\t\t\t// Can be null\r\n\t\t\t\t\tif (!(ctx = canvas.getContext(\"2d\"))) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcanvas.width = resizeInfo.dWidth;\r\n\t\t\t\t\tcanvas.height = resizeInfo.dHeight;\r\n\t\t\t\t\tctx.drawImage(\r\n\t\t\t\t\t\timgEl,\r\n\t\t\t\t\t\tresizeInfo.sx,\r\n\t\t\t\t\t\tresizeInfo.sy,\r\n\t\t\t\t\t\tresizeInfo.sWidth,\r\n\t\t\t\t\t\tresizeInfo.sHeight,\r\n\t\t\t\t\t\tresizeInfo.dx,\r\n\t\t\t\t\t\tresizeInfo.dy,\r\n\t\t\t\t\t\tresizeInfo.dWidth,\r\n\t\t\t\t\t\tresizeInfo.dHeight\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst thumbnail = canvas.toDataURL(\"image/png\");\r\n\t\t\t\t\tfile.dataUrl = thumbnail;\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.Thumbnail, file, thumbnail);\r\n\r\n\t\t\t\t\tif (callback) {\r\n\t\t\t\t\t\treturn callback();\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tfalse\r\n\t\t\t);\r\n\t\t\tif (callback) {\r\n\t\t\t\timgEl.addEventListener(\r\n\t\t\t\t\t\"error\",\r\n\t\t\t\t\tcallback as EventListenerOrEventListenerObject,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\timgEl.src = imageUrl;\r\n\t\t},\r\n\t\tprocessQueue(): void {\r\n\t\t\tconst len_uploading = this.uploadingFiles.length;\r\n\t\t\tif (\r\n\t\t\t\tlen_uploading >= this.maxConcurrentUploads ||\r\n\t\t\t\tthis.queuedFiles.length === 0\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\treturn this.processFiles(\r\n\t\t\t\t\tthis.queuedFiles.slice(\r\n\t\t\t\t\t\t0,\r\n\t\t\t\t\t\tthis.maxConcurrentUploads - len_uploading\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tlet i = len_uploading;\r\n\t\t\tlet file: VTransmitFile | undefined;\r\n\t\t\tfor (; i < this.maxConcurrentUploads; i++) {\r\n\t\t\t\tif ((file = this.queuedFiles.shift())) {\r\n\t\t\t\t\tthis.processFile(file);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tprocessFile(file: VTransmitFile): void {\r\n\t\t\tthis.processFiles([file]);\r\n\t\t},\r\n\t\tprocessFiles(files: VTransmitFile[]): void {\r\n\t\t\tlet file: VTransmitFile;\r\n\t\t\tfor (file of files) {\r\n\t\t\t\tfile.processing = true;\r\n\t\t\t\tfile.status = UploadStatuses.Uploading;\r\n\t\t\t\tthis.$emit(VTransmitEvents.Processing, file);\r\n\t\t\t}\r\n\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\tthis.$emit(VTransmitEvents.ProcessingMultiple, files);\r\n\t\t\t}\r\n\r\n\t\t\treturn this.uploadFiles(files);\r\n\t\t},\r\n\t\tcancelUpload(file: VTransmitFile): void {\r\n\t\t\t// Cancel a file before uploading\r\n\t\t\tif (\r\n\t\t\t\tfile.status === UploadStatuses.Added ||\r\n\t\t\t\tfile.status === UploadStatuses.Queued\r\n\t\t\t) {\r\n\t\t\t\tfile.status = UploadStatuses.Canceled;\r\n\t\t\t\tthis.$emit(VTransmitEvents.Canceled, file);\r\n\t\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.CanceledMultiple, [file]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Cancel an in-progress upload\r\n\t\t\tif (file.status === UploadStatuses.Uploading) {\r\n\t\t\t\tlet canceledFiles = this.transport.cancelUpload(file);\r\n\t\t\t\tlet f: VTransmitFile;\r\n\t\t\t\tfor (f of canceledFiles) {\r\n\t\t\t\t\tf.status = UploadStatuses.Canceled;\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.Canceled, f);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.CanceledMultiple, canceledFiles);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\tthis.processQueue();\r\n\t\t\t}\r\n\t\t},\r\n\t\tuploadFile(file: VTransmitFile): void {\r\n\t\t\tthis.uploadFiles([file]);\r\n\t\t},\r\n\t\tuploadFiles(files: VTransmitFile[]): void {\r\n\t\t\tthis.transport.uploadFiles(files).then(result => {\r\n\t\t\t\tif (result.ok) {\r\n\t\t\t\t\treturn this.uploadFinished(files, result.data);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (result.err.type) {\r\n\t\t\t\t\tcase ErrType.Any:\r\n\t\t\t\t\t\tthis.errorProcessing(\r\n\t\t\t\t\t\t\tfiles,\r\n\t\t\t\t\t\t\tresult.err.message,\r\n\t\t\t\t\t\t\tresult.err.data\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ErrType.Timeout:\r\n\t\t\t\t\t\tthis.handleTimeout(\r\n\t\t\t\t\t\t\tfiles,\r\n\t\t\t\t\t\t\tresult.err.message,\r\n\t\t\t\t\t\t\tresult.err.data\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\texpectNever(result.err.type, \"unmatched error case\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\thandleTimeout(files: VTransmitFile[], message: string, data: any): void {\r\n\t\t\tlet f: VTransmitFile;\r\n\t\t\tfor (f of files) {\r\n\t\t\t\tf.status = UploadStatuses.Timeout;\r\n\t\t\t\tf.endProgress();\r\n\t\t\t\tthis.$emit(VTransmitEvents.Timeout, f, message, data);\r\n\t\t\t}\r\n\t\t\tthis.$emit(VTransmitEvents.TimeoutMultiple, files, message, data);\r\n\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\tthis.processQueue();\r\n\t\t\t}\r\n\t\t},\r\n\t\tupdateTotalUploadProgress(): void {\r\n\t\t\tconst progress = this.activeFiles.reduce(\r\n\t\t\t\t(memo, file) => {\r\n\t\t\t\t\tmemo.totalBytesSent += file.upload.bytesSent;\r\n\t\t\t\t\tmemo.totalBytes += file.upload.total;\r\n\t\t\t\t\treturn memo;\r\n\t\t\t\t},\r\n\t\t\t\t{ totalBytesSent: 0, totalBytes: 0, totalProgress: 100 }\r\n\t\t\t);\r\n\r\n\t\t\tif (this.activeFiles.length) {\r\n\t\t\t\tprogress.totalProgress =\r\n\t\t\t\t\t(100 * progress.totalBytesSent) / progress.totalBytes;\r\n\t\t\t}\r\n\r\n\t\t\tthis.$emit(VTransmitEvents.TotalUploadProgress, progress);\r\n\t\t},\r\n\t\tuploadFinished(\r\n\t\t\tfiles: VTransmitFile[],\r\n\t\t\tresponse: string | object | any[],\r\n\t\t\t...args: any[]\r\n\t\t): void {\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tfile.status = UploadStatuses.Success;\r\n\t\t\t\tfile.endProgress();\r\n\t\t\t\tthis.$emit(VTransmitEvents.Success, file, response, ...args);\r\n\t\t\t\tthis.$emit(VTransmitEvents.Complete, file);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\tthis.$emit(\r\n\t\t\t\t\tVTransmitEvents.SuccessMultiple,\r\n\t\t\t\t\tfiles,\r\n\t\t\t\t\tresponse,\r\n\t\t\t\t\t...args\r\n\t\t\t\t);\r\n\t\t\t\tthis.$emit(VTransmitEvents.CompleteMultiple, files);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\tthis.processQueue();\r\n\t\t\t}\r\n\t\t},\r\n\t\terrorProcessing(files: VTransmitFile[], message: string, data?: any) {\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tfile.status = UploadStatuses.Error;\r\n\t\t\t\tfile.errorMessage = message;\r\n\t\t\t\tfile.endProgress();\r\n\t\t\t\tthis.$emit(VTransmitEvents.Error, file, message, data);\r\n\t\t\t\tthis.$emit(VTransmitEvents.Complete, file);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\tthis.$emit(VTransmitEvents.ErrorMultiple, files, message, data);\r\n\t\t\t\tthis.$emit(VTransmitEvents.CompleteMultiple, files);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\treturn this.processQueue();\r\n\t\t\t}\r\n\t\t},\r\n\t\tisValidFileType(\r\n\t\t\tfile: VTransmitFile,\r\n\t\t\tacceptedFileTypes: string[]\r\n\t\t): boolean {\r\n\t\t\tif (!acceptedFileTypes.length) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tconst mime_type = file.type;\r\n\t\t\tconst base_type = mime_type.slice(0, mime_type.indexOf(\"/\"));\r\n\t\t\tlet valid_type: string;\r\n\t\t\t// Return true on the first condition match,\r\n\t\t\t// otherwise exhaust all conditions and return false.\r\n\t\t\tfor (valid_type of acceptedFileTypes) {\r\n\t\t\t\tswitch (true) {\r\n\t\t\t\t\t// Handle extension validation\r\n\t\t\t\t\tcase valid_type.charAt(0) == \".\":\r\n\t\t\t\t\t\t// Ensure extension exists at the end of the filename.\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tfile.name\r\n\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t.indexOf(\r\n\t\t\t\t\t\t\t\t\tvalid_type.toLowerCase(),\r\n\t\t\t\t\t\t\t\t\tfile.name.length - valid_type.length\r\n\t\t\t\t\t\t\t\t) !== -1\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle globs (\"image/*\")\r\n\t\t\t\t\tcase valid_type.slice(-2) == \"/*\":\r\n\t\t\t\t\t\tif (base_type === valid_type.slice(0, -2)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Match mimetype exact\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tif (mime_type == valid_type) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\thandleDragStart(e: DragEvent): void {\r\n\t\t\tthis.$emit(\"drag-start\", e);\r\n\t\t},\r\n\t\thandleDragOver(e: DragEvent): void {\r\n\t\t\tthis.dragging = true;\r\n\t\t\tlet effect;\r\n\t\t\ttry {\r\n\t\t\t\t// Handle browser bug\r\n\t\t\t\teffect = e.dataTransfer.effectAllowed;\r\n\t\t\t} catch (error) {}\r\n\t\t\te.dataTransfer.dropEffect =\r\n\t\t\t\teffect === \"move\" || effect === \"linkMove\" ? \"move\" : \"copy\";\r\n\t\t\tthis.$emit(VTransmitEvents.DragOver, e);\r\n\t\t},\r\n\t\thandleDragEnter(e: DragEvent): void {\r\n\t\t\tthis.dragging = true;\r\n\t\t\tthis.$emit(VTransmitEvents.DragEnter, e);\r\n\t\t},\r\n\t\thandleDragLeave(e: DragEvent): void {\r\n\t\t\tthis.dragging = false;\r\n\t\t\tthis.$emit(VTransmitEvents.DragLeave, e);\r\n\t\t},\r\n\t\thandleDragEnd(e: DragEvent): void {\r\n\t\t\tthis.dragging = false;\r\n\t\t\tthis.$emit(VTransmitEvents.DragEnd, e);\r\n\t\t},\r\n\t\thandleDrop(e: DragEvent): void {\r\n\t\t\tthis.dragging = false;\r\n\t\t\tif (!e.dataTransfer) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet files: File[];\r\n\t\t\tlet items: DataTransferItem[];\r\n\r\n\t\t\tthis.$emit(VTransmitEvents.Drop, e);\r\n\t\t\tthis.$emit(\r\n\t\t\t\tVTransmitEvents.AddedFiles,\r\n\t\t\t\t(files = Array.from(e.dataTransfer.files))\r\n\t\t\t);\r\n\r\n\t\t\tif (!e.dataTransfer.items) {\r\n\t\t\t\tthis.handleFiles(files);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\titems = Array.from(e.dataTransfer.items);\r\n\t\t\tif (\r\n\t\t\t\t!items ||\r\n\t\t\t\t!items.length ||\r\n\t\t\t\t!(items[0].getAsFile || items[0].webkitGetAsEntry)\r\n\t\t\t) {\r\n\t\t\t\tthis.handleFiles(files);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.addFilesFromItems(items);\r\n\t\t},\r\n\t\thandlePaste(e: ClipboardEvent): void {\r\n\t\t\tlet cb = e.clipboardData || window.clipboardData;\r\n\t\t\tif (!e || !e.clipboardData || !e.clipboardData.items) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.$emit(VTransmitEvents.Paste, e);\r\n\t\t\tconst items = Array.from(e.clipboardData.items);\r\n\t\t\tif (items.length) {\r\n\t\t\t\tthis.addFilesFromItems(items);\r\n\t\t\t}\r\n\t\t},\r\n\t\thandleFiles(files: File[]): VTransmitFile[] {\r\n\t\t\treturn files.map(this.addFile);\r\n\t\t},\r\n\t\taddFilesFromItems(items: DataTransferItem[]): void {\r\n\t\t\tlet entry: FileSystemEntry;\r\n\t\t\tfor (const item of items) {\r\n\t\t\t\t// Newer API on standards track\r\n\t\t\t\tif (item.getAsFile && item.kind == \"file\") {\r\n\t\t\t\t\tlet file = item.getAsFile();\r\n\t\t\t\t\tif (file) {\r\n\t\t\t\t\t\tthis.addFile(file);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Vendor prefixed experimental API\r\n\t\t\t\tif (item.webkitGetAsEntry) {\r\n\t\t\t\t\tentry = item.webkitGetAsEntry();\r\n\r\n\t\t\t\t\tif (entry == null) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (webkitIsFile(entry)) {\r\n\t\t\t\t\t\tentry.file(this.addFile as any, console.error);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (webkitIsDir(entry)) {\r\n\t\t\t\t\t\tthis.addFilesFromDirectory(entry, entry.name);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\taddFilesFromDirectory(\r\n\t\t\tdirectory: WebKitDirectoryEntry,\r\n\t\t\tpath: string\r\n\t\t): void {\r\n\t\t\tdirectory.createReader().readEntries(\r\n\t\t\t\t<any>((entries: FileSystemEntry[]) => {\r\n\t\t\t\t\tfor (const entry of entries) {\r\n\t\t\t\t\t\tif (entry == null) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (webkitIsDir(entry)) {\r\n\t\t\t\t\t\t\tthis.addFilesFromDirectory(entry, `${path}/${entry.name}`);\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (webkitIsFile(entry)) {\r\n\t\t\t\t\t\t\tentry.file(\r\n\t\t\t\t\t\t\t\t<any>((file: File) => {\r\n\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\tthis.ignoreHiddenFiles &&\r\n\t\t\t\t\t\t\t\t\t\tfile.name.charAt(0) == \".\"\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t(file as any).fullPath = `${path}/${file.name}`;\r\n\t\t\t\t\t\t\t\t\tthis.addFile(file);\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tconsole.error\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tconsole.error\r\n\t\t\t);\r\n\t\t},\r\n\t},\r\n});\r\n</script>\r\n","import { VTransmitFile } from \"../classes/VTransmitFile\";\r\nimport { VTransmitUploadContext } from \"../classes/VTransmitUploadContext\";\r\nimport { DriverInterface, UploadResult } from \"../core/interfaces\";\r\nimport {\r\n\tVTransmitEvents,\r\n\tUploadStatuses,\r\n\tErrType,\r\n\tis_function,\r\n} from \"../core/utils\";\r\n\r\nexport type ParamName = string | ((file: VTransmitFile) => string);\r\nexport type StaticOrDynamic<T> = T | ((files: VTransmitFile[]) => T);\r\n\r\nfunction resolveStaticOrDynamic<T>(\r\n\tx: StaticOrDynamic<T>,\r\n\tfiles: VTransmitFile[]\r\n): T {\r\n\tif (is_function(x)) {\r\n\t\treturn x(files);\r\n\t}\r\n\r\n\treturn x;\r\n}\r\n\r\nexport enum ParamNameStyle {\r\n\tEmpty,\r\n\tIndexed,\r\n\tBrackets,\r\n}\r\n\r\n/**\r\n * Responsibilities:\r\n * - send and manage upload via transport\r\n * - on progress: emit progress stats\r\n * - on error: emit to vue-transmit & update file status\r\n * - on timeout: emit to vue-transmit & update file status\r\n * - on error: emit to vue-transmit & update file status\r\n * - on success: emit to vue-transmit & update file status\r\n * - once complete: emit to vue-transmit & update file status\r\n */\r\nexport type XHRDriverOptions<T = any> = {\r\n\t/**\r\n\t * A string representing the URL to send the request to\r\n\t * or a function called with an array of files for the upload\r\n\t * that returns a string url.\r\n\t */\r\n\turl: StaticOrDynamic<string>;\r\n\t/**\r\n\t * The HTTP method to use, such as \"GET\", \"POST\", \"PUT\", \"DELETE\", etc.\r\n\t * Ignored for non-HTTP(S) URLs.\r\n\t *\r\n\t * ```\r\n\t * // default => \"post\"\r\n\t * ```\r\n\t */\r\n\tmethod?: StaticOrDynamic<string>;\r\n\t/**\r\n\t * The XMLHttpRequest.withCredentials property is a Boolean that indicates\r\n\t * whether or not cross-site Access-Control requests should be made using\r\n\t * credentials such as cookies, authorization headers or TLS client\r\n\t * certificates. Setting withCredentials has no effect on same-site requests.\r\n\t */\r\n\twithCredentials?: StaticOrDynamic<boolean>;\r\n\t/**\r\n\t * The XMLHttpRequest.timeout property is an unsigned long representing the\r\n\t * number of milliseconds a request can take before automatically being\r\n\t * terminated. The default value is 0, which means there is no timeout.\r\n\t * Timeout shouldn't be used for synchronous XMLHttpRequests requests used in\r\n\t * a document environment or it will throw an InvalidAccessError exception.\r\n\t * When a timeout happens, a timeout event is fired.\r\n\t */\r\n\ttimeout?: StaticOrDynamic<number>;\r\n\t/**\r\n\t * The name of the file param that gets transferred.\r\n\t */\r\n\tparamName?: ParamName;\r\n\t/**\r\n\t * The param name syntax for multiple uploads.\r\n\t *\r\n\t * **Options:**\r\n\t * - `0 (Empty)` _(Default)_ Adds nothing to the paramName: `file`\r\n\t * - `1 (Indexed)` Adds the array index of the file: `file[0]`\r\n\t * - `2 (Brackets)` Adds the array-like brackets without index: `file[]`\r\n\t */\r\n\tmultipleParamNameStyle?: ParamNameStyle;\r\n\t/**\r\n\t * An object of additional parameters to transfer to the server.\r\n\t * This is the same as adding hidden input fields in the form element.\r\n\t */\r\n\tparams?: StaticOrDynamic<Dictionary<string>>;\r\n\theaders?: StaticOrDynamic<Dictionary<string>>;\r\n\t/**\r\n\t * The XMLHttpRequest.responseType property is an enumerated value that\r\n\t * returns the type of response. It also lets the author change the response\r\n\t * type. If an empty string is set as the value of responseType, the default\r\n\t * value text will be used.\r\n\t *\r\n\t * Setting the value of responseType to \"document\" is ignored if done in a\r\n\t * Worker environment. When setting responseType to a particular value,\r\n\t * the author should make sure that the server is actually sending a response\r\n\t * compatible to that format. If the server returns data that is not\r\n\t * compatible to the responseType that was set, the value of response will be\r\n\t * null. Also, setting responseType for synchronous requests will throw an\r\n\t * InvalidAccessError exception.\r\n\t */\r\n\tresponseType?: StaticOrDynamic<XMLHttpRequestResponseType>;\r\n\t/**\r\n\t * responseParseFunc is a function that given an XMLHttpRequest\r\n\t * returns a response object. Allows for custom response parsing.\r\n\t */\r\n\tresponseParseFunc?: (xhr: XMLHttpRequest) => T;\r\n\terrUploadError?: (xhr: XMLHttpRequest) => string;\r\n\terrUploadTimeout?: (xhr: XMLHttpRequest) => string;\r\n\trenameFile?: (name: string) => string;\r\n};\r\n\r\nexport type XHRUploadGroup = {\r\n\tid: number;\r\n\tfiles: VTransmitFile[];\r\n\txhr: XMLHttpRequest;\r\n};\r\n\r\nlet group_id = 0;\r\n\r\nexport class XHRDriver<T = any> implements DriverInterface {\r\n\tpublic context: VTransmitUploadContext;\r\n\tpublic url: StaticOrDynamic<string>;\r\n\tpublic method: StaticOrDynamic<string>;\r\n\tpublic withCredentials: StaticOrDynamic<boolean>;\r\n\tpublic timeout: StaticOrDynamic<number>;\r\n\tpublic paramName: ParamName;\r\n\tpublic multipleParamNameStyle: ParamNameStyle;\r\n\tpublic params: StaticOrDynamic<Dictionary<string>>;\r\n\tpublic headers: StaticOrDynamic<Dictionary<string>>;\r\n\tpublic responseType: StaticOrDynamic<XMLHttpRequestResponseType>;\r\n\tpublic errUploadError: (xhr: XMLHttpRequest) => string;\r\n\tpublic errUploadTimeout: (xhr: XMLHttpRequest) => string;\r\n\tpublic renameFile: (name: string) => string;\r\n\tpublic responseParseFunc?: (xhr: XMLHttpRequest) => T;\r\n\r\n\tprivate uploadGroups: { [key: number]: XHRUploadGroup } = Object.create(\r\n\t\tnull\r\n\t);\r\n\r\n\tconstructor(context: VTransmitUploadContext, options: XHRDriverOptions<T>) {\r\n\t\tlet {\r\n\t\t\turl,\r\n\t\t\tmethod = \"post\",\r\n\t\t\twithCredentials = false,\r\n\t\t\ttimeout = 0,\r\n\t\t\tparamName = \"file\",\r\n\t\t\tmultipleParamNameStyle = ParamNameStyle.Empty,\r\n\t\t\tparams = Object.create(null),\r\n\t\t\theaders = {\r\n\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t\"Cache-Control\": \"no-cache\",\r\n\t\t\t\t\"X-Requested-With\": \"XMLHttpRequest\",\r\n\t\t\t},\r\n\t\t\tresponseType = \"json\",\r\n\t\t\tresponseParseFunc,\r\n\t\t\terrUploadError = (xhr: XMLHttpRequest) =>\r\n\t\t\t\t`Error during upload: ${xhr.statusText} [${xhr.status}]`,\r\n\t\t\terrUploadTimeout = (_xhr: XMLHttpRequest) =>\r\n\t\t\t\t`Error during upload: the server timed out.`,\r\n\t\t\trenameFile = (name: string) => name,\r\n\t\t} = options;\r\n\r\n\t\tif (!url) {\r\n\t\t\tthrow new TypeError(\r\n\t\t\t\t`${\r\n\t\t\t\t\tthis.constructor.name\r\n\t\t\t\t} requires a 'url' parameter. Supply a string or a function returning a string.`\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.context = context;\r\n\t\tthis.url = url;\r\n\t\tthis.method = method;\r\n\t\tthis.withCredentials = withCredentials;\r\n\t\tthis.timeout = timeout;\r\n\t\tthis.paramName = paramName;\r\n\t\tthis.multipleParamNameStyle = multipleParamNameStyle;\r\n\t\tthis.params = params;\r\n\t\tthis.headers = headers;\r\n\t\tthis.responseType = responseType;\r\n\t\tthis.responseParseFunc = responseParseFunc;\r\n\t\tthis.errUploadError = errUploadError;\r\n\t\tthis.errUploadTimeout = errUploadTimeout;\r\n\t\tthis.renameFile = renameFile;\r\n\t}\r\n\r\n\tuploadFiles(files: VTransmitFile[]): Promise<UploadResult<T>> {\r\n\t\treturn new Promise(resolve => {\r\n\t\t\tif (!this.url) {\r\n\t\t\t\treturn resolve({\r\n\t\t\t\t\tok: false,\r\n\t\t\t\t\terr: {\r\n\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\tmessage: `Missing upload URL.`,\r\n\t\t\t\t\t\tdata: this.url,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\tconst updateProgress = this.handleUploadProgress(files);\r\n\t\t\tconst id = group_id++;\r\n\t\t\tconst params = resolveStaticOrDynamic(this.params, files);\r\n\t\t\tconst headers = resolveStaticOrDynamic(this.headers, files);\r\n\r\n\t\t\tthis.uploadGroups[id] = { id, xhr, files };\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tfile.driverData.groupID = id;\r\n\t\t\t\tfile.startProgress();\r\n\t\t\t}\r\n\r\n\t\t\txhr.open(\r\n\t\t\t\tresolveStaticOrDynamic(this.method, files),\r\n\t\t\t\tresolveStaticOrDynamic(this.url, files),\r\n\t\t\t\ttrue\r\n\t\t\t);\r\n\t\t\t// Setting the timeout after open because of IE11 issue:\r\n\t\t\t// @link https://gitlab.com/meno/dropzone/issues/8\r\n\t\t\txhr.timeout = resolveStaticOrDynamic(this.timeout, files);\r\n\t\t\txhr.withCredentials = resolveStaticOrDynamic(\r\n\t\t\t\tthis.withCredentials,\r\n\t\t\t\tfiles\r\n\t\t\t);\r\n\t\t\txhr.responseType = resolveStaticOrDynamic(this.responseType, files);\r\n\r\n\t\t\txhr.addEventListener(\"error\", () => {\r\n\t\t\t\tthis.rmGroup(id);\r\n\t\t\t\tresolve({\r\n\t\t\t\t\tok: false,\r\n\t\t\t\t\terr: {\r\n\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\tmessage: this.errUploadError(xhr),\r\n\t\t\t\t\t\tdata: xhr,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\txhr.upload.addEventListener(\"progress\", updateProgress);\r\n\t\t\txhr.addEventListener(\"timeout\", () => {\r\n\t\t\t\tthis.rmGroup(id);\r\n\t\t\t\tresolve({\r\n\t\t\t\t\tok: false,\r\n\t\t\t\t\terr: {\r\n\t\t\t\t\t\ttype: ErrType.Timeout,\r\n\t\t\t\t\t\tmessage: this.errUploadTimeout(xhr),\r\n\t\t\t\t\t\tdata: xhr,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\txhr.addEventListener(\"load\", () => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tfiles[0].status === UploadStatuses.Canceled ||\r\n\t\t\t\t\txhr.readyState !== XMLHttpRequest.DONE\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// The XHR is complete, so remove the group\r\n\t\t\t\tthis.rmGroup(id);\r\n\r\n\t\t\t\tlet response: T;\r\n\t\t\t\tif (this.responseParseFunc) {\r\n\t\t\t\t\tresponse = this.responseParseFunc(xhr);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresponse = xhr.response;\r\n\r\n\t\t\t\t\tif (!xhr.responseType) {\r\n\t\t\t\t\t\tlet contentType = xhr.getResponseHeader(\"content-type\");\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tcontentType &&\r\n\t\t\t\t\t\t\tcontentType.indexOf(\"application/json\") > -1\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tresponse = JSON.parse(xhr.responseText);\r\n\t\t\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t\t\treturn resolve({\r\n\t\t\t\t\t\t\t\t\tok: false,\r\n\t\t\t\t\t\t\t\t\terr: {\r\n\t\t\t\t\t\t\t\t\t\tmessage: \"Invalid JSON response from server.\",\r\n\t\t\t\t\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\t\t\t\t\tdata: err,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Called on load (complete) to complete progress tracking logic.\r\n\t\t\t\tupdateProgress();\r\n\t\t\t\tif (xhr.status < 200 || xhr.status >= 300) {\r\n\t\t\t\t\treturn resolve({\r\n\t\t\t\t\t\tok: false,\r\n\t\t\t\t\t\terr: {\r\n\t\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\t\tmessage: this.errUploadError(xhr),\r\n\t\t\t\t\t\t\tdata: xhr,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn resolve({\r\n\t\t\t\t\tok: true,\r\n\t\t\t\t\tdata: response,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tfor (const headerName of Object.keys(headers)) {\r\n\t\t\t\tif (headers[headerName]) {\r\n\t\t\t\t\txhr.setRequestHeader(headerName, headers[headerName]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst formData = new FormData();\r\n\t\t\tfor (const key of Object.keys(params)) {\r\n\t\t\t\tformData.append(key, params[key]);\r\n\t\t\t}\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tthis.context.emit(VTransmitEvents.Sending, file, xhr, formData);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.context.props.uploadMultiple) {\r\n\t\t\t\tthis.context.emit(\r\n\t\t\t\t\tVTransmitEvents.SendingMultiple,\r\n\t\t\t\t\tfiles,\r\n\t\t\t\t\txhr,\r\n\t\t\t\t\tformData\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0, len = files.length; i < len; i++) {\r\n\t\t\t\tformData.append(\r\n\t\t\t\t\tthis.getParamName(files[i], i),\r\n\t\t\t\t\tfiles[i].nativeFile,\r\n\t\t\t\t\tthis.renameFile(files[i].name)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\txhr.send(formData);\r\n\t\t});\r\n\t}\r\n\r\n\thandleUploadProgress(files: VTransmitFile[]): (e?: ProgressEvent) => void {\r\n\t\tconst vm = this.context.vtransmit;\r\n\r\n\t\treturn function onProgressFn(e?: ProgressEvent): void {\r\n\t\t\tif (!e) {\r\n\t\t\t\tlet allFilesFinished = true;\r\n\r\n\t\t\t\tfor (const file of files) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tfile.upload.progress !== 100 ||\r\n\t\t\t\t\t\tfile.upload.bytesSent !== file.upload.total\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tallFilesFinished = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfile.upload.progress = 100;\r\n\t\t\t\t\tfile.upload.bytesSent = file.upload.total;\r\n\t\t\t\t\tfile.endProgress();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (allFilesFinished) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tif (e) {\r\n\t\t\t\t\tfile.handleProgress(e);\r\n\t\t\t\t}\r\n\t\t\t\tvm.$emit(\r\n\t\t\t\t\tVTransmitEvents.UploadProgress,\r\n\t\t\t\t\tfile,\r\n\t\t\t\t\tfile.upload.progress,\r\n\t\t\t\t\tfile.upload.bytesSent\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tgetParamName(file: VTransmitFile, index: string | number): string {\r\n\t\tlet paramName: string;\r\n\t\tif (is_function(this.paramName)) {\r\n\t\t\tparamName = this.paramName(file);\r\n\t\t} else {\r\n\t\t\tparamName = this.paramName;\r\n\t\t}\r\n\r\n\t\tif (!this.context.props.uploadMultiple) {\r\n\t\t\treturn paramName;\r\n\t\t}\r\n\r\n\t\tswitch (this.multipleParamNameStyle) {\r\n\t\t\tcase ParamNameStyle.Indexed:\r\n\t\t\t\tparamName += `[${index}]`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ParamNameStyle.Brackets:\r\n\t\t\t\tparamName += `[]`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ParamNameStyle.Empty:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn paramName;\r\n\t}\r\n\r\n\tcancelUpload(file: VTransmitFile): VTransmitFile[] {\r\n\t\tlet group = this.uploadGroups[file.driverData.groupID];\r\n\t\tif (!group) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tgroup.xhr.abort();\r\n\t\tthis.rmGroup(file.driverData.groupID);\r\n\r\n\t\treturn [...group.files];\r\n\t}\r\n\r\n\trmGroup(id: number) {\r\n\t\tdelete this.uploadGroups[id];\r\n\t}\r\n}\r\n","import VueTransmit from \"./components/VueTransmit.vue\";\r\nimport { PluginObject } from \"vue\";\r\nimport {\r\n\tXHRDriver,\r\n\tParamNameStyle,\r\n\tXHRDriverOptions,\r\n\tXHRUploadGroup,\r\n} from \"./upload-drivers/xhr\";\r\nimport { AxiosDriver, AxiosDriverOptions } from \"./upload-drivers/axios\";\r\n\r\nimport {\r\n\tDriverConstructor,\r\n\tDriverInterface,\r\n\tUploadErr,\r\n\tUploadResult,\r\n} from \"./core/interfaces\";\r\nimport {\r\n\tDimensions,\r\n\tDrawImageArgs,\r\n\tErrType,\r\n\tUploadStatuses,\r\n\tVTransmitEvents,\r\n} from \"./core/utils\";\r\n\r\nconst VueTransmitPlugin: PluginObject<undefined> = {\r\n\tinstall(Vue) {\r\n\t\tVue.component(\"VueTransmit\", VueTransmit);\r\n\t},\r\n\tname: \"vue-transmit\",\r\n};\r\n\r\nexport {\r\n\tVueTransmitPlugin,\r\n\tVueTransmit,\r\n\tXHRDriver,\r\n\tParamNameStyle,\r\n\tXHRDriverOptions,\r\n\tXHRUploadGroup,\r\n\tAxiosDriver,\r\n\tAxiosDriverOptions,\r\n\tDriverConstructor,\r\n\tDriverInterface,\r\n\tUploadErr,\r\n\tUploadResult,\r\n\tDimensions,\r\n\tDrawImageArgs,\r\n\tErrType,\r\n\tUploadStatuses,\r\n\tVTransmitEvents,\r\n};\r\n\r\nexport default VueTransmitPlugin;\r\n"],"names":["x","UploadStatuses","ErrType","VTransmitEvents","idCounter","number","decimals","roundingFactor","Math","pow","round","entry","isFile","isDirectory","ParamNameStyle","file","this","VTransmitFile","idFactory","None","bytesSent","progress","total","speed","kbps","mbps","start","end","time","nativeFile","lastModified","lastModifiedDate","name","size","type","webkitRelativePath","upload","e","startProgress","bytes","seconds","min","loaded","Date","now","fromBytesToKbit","fromBytesToMbit","toMbps","endProgress","Object","thumbnailLoaded","_dataUrl","value","defineProperty","enumerable","configurable","writable","vtransmit","props","$props","VTransmitUploadContext","event","_i","args","_a","$emit","acceptedFiles","rejectedFiles","addedFiles","queuedFiles","uploadingFiles","activeFiles","group_id","context","options","create","url","method","_b","withCredentials","_c","timeout","_d","paramName","_e","multipleParamNameStyle","_f","params","_g","headers","_h","responseType","responseParseFunc","_j","errUploadError","_k","errUploadTimeout","_l","renameFile","http","TypeError","constructor","AxiosDriver","files","Promise","resolve","_this","ok","err","Any","message","data","xhr","XMLHttpRequest","id","is_function","resolveStaticOrDynamic","uploadGroups","files_1","driverData","groupID","formData","FormData","keys","key","append","files_2","emit","Sending","uploadMultiple","SendingMultiple","i","len","length","getParamName","body","onUploadProgress","progressEvent","handleProgress","success","response","error","vm","allFilesFinished","files_3","files_4","UploadProgress","index","Indexed","Brackets","Empty","group","abort","rmGroup","Vue","extend","render","tag","String","default","disableDraggable","Boolean","uploadAreaClasses","Array","uploadAreaAttrs","NewObject","uploadAreaListeners","dragClass","filesSlotFirst","maxConcurrentUploads","Number","maxFileSize","useBinarySizeBase","createImageThumbnails","maxThumbnailFileSize","thumbnailWidth","thumbnailHeight","maxFiles","clickable","ignoreHiddenFiles","acceptedFileTypes","autoProcessQueue","autoQueue","capture","errMaxFileSizeExceeded","Function","fileSize","units","errInvalidFileType","_acceptedTypes","_file","errMaxFilesExceeded","accept","done","resize","dims","w","h","ratio","sRatio","width","height","dRatio","coords","sx","sy","sWidth","sHeight","dx","dy","dWidth","dHeight","scaleW","driverOptions","driver","mounted","$on","updateTotalUploadProgress","RemovedFile","Canceled","Complete","then","QueueComplete","window","addEventListener","handlePaste","Initialize","beforeDestroy","removeEventListener","dragging","processingThumbnail","thumbnailQueue","defaultHeaders","Accept","Cache-Control","X-Requested-With","formStyles","visibility","position","top","left","computed","inputEl","el","$refs","hiddenFileInput","HTMLInputElement","formEl","uploadForm","HTMLFormElement","fileSizeBase","maxFileSizeBytes","filesToAccept","join","multiple","getFilesWithStatus","Added","Queued","filter","f","accepted","Uploading","canceledFiles","failedFiles","Error","timeoutFiles","Timeout","successfulFiles","Success","maxFilesReached","maxFilesReachedClass","isDraggingClass","v-transmit__upload-area--is-dragging","isUploading","fileSlotBindings","transport","Driver","console","watch","MaxFilesReached","methods","statuses","arguments","indexOf","status","onFileInputChange","AddedFiles","from","map","addFile","reset","vtFile","push","AddedFile","enqueueThumbnail","acceptFile","errorProcessing","RejectedFile","AcceptComplete","AcceptedFile","enqueueFile","mega","isValidFileType","MaxFilesExceeded","removeFile","cancelUpload","idxToRm","findIndex","splice","Reset","removeFilesWithStatus","apply","removeAllFiles","cancelInProgressUploads","triggerBrowseFiles","click","handleClickUploaderAction","processQueue","match","processThumbnailQueue","shift","createThumbnail","callback","noop","reader","FileReader","dataUrl","result","Thumbnail","createThumbnailFromUrl","readAsDataURL","imageUrl","imgEl","document","createElement","ctx","resizeInfo","canvas","getContext","drawImage","thumbnail","toDataURL","src","len_uploading","processFiles","slice","processFile","processing","Processing","ProcessingMultiple","uploadFiles","CanceledMultiple","canceledFiles_1","uploadFile","uploadFinished","handleTimeout","_","msg","expectNever","TimeoutMultiple","reduce","memo","totalBytesSent","totalBytes","totalProgress","TotalUploadProgress","concat","SuccessMultiple","CompleteMultiple","errorMessage","ErrorMultiple","valid_type","mime_type","base_type","acceptedFileTypes_1","charAt","toLowerCase","handleDragStart","handleDragOver","effect","dataTransfer","effectAllowed","dropEffect","DragOver","handleDragEnter","DragEnter","handleDragLeave","DragLeave","handleDragEnd","DragEnd","handleDrop","items","Drop","getAsFile","webkitGetAsEntry","addFilesFromItems","handleFiles","clipboardData","Paste","items_1","item","kind","webkitIsFile","webkitIsDir","addFilesFromDirectory","directory","path","createReader","readEntries","entries","entries_1","fullPath","XHRDriver","updateProgress","handleUploadProgress","open","readyState","DONE","contentType","getResponseHeader","JSON","parse","responseText","headerName","setRequestHeader","send","VueTransmitPlugin","install","component","VueTransmit"],"mappings":"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"}