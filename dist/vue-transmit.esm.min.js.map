{"version":3,"file":"vue-transmit.esm.min.js","sources":["../src/core/utils.ts","../src/classes/VTransmitFile.ts","../src/upload-drivers/xhr.ts","../src/classes/VTransmitUploadContext.ts","../src/upload-drivers/axios.ts","../src/components/VueTransmit.vue","../src/upload-drivers/firebase.ts","../src/index.ts"],"sourcesContent":["import { VTransmitFile } from \"../classes/VTransmitFile\";\r\n\r\nexport function is_function(x: any): x is Function {\r\n\treturn typeof x == \"function\";\r\n}\r\n\r\nlet idCounter = 0;\r\nexport function uniqueId(prefix: string): string {\r\n\treturn prefix + ++idCounter;\r\n}\r\n\r\nexport function round(number: number, decimals: number = 2) {\r\n\tconst roundingFactor = Math.pow(10, decimals);\r\n\treturn Math.round(number * roundingFactor) / roundingFactor;\r\n}\r\n\r\nexport function fromBytesToKbit(bytes: number): number {\r\n\treturn bytes / 125;\r\n}\r\n\r\nexport function fromBytesToMbit(bytes: number): number {\r\n\treturn bytes / 125000;\r\n}\r\n\r\nexport function toKbps(bytes: number, seconds: number): number {\r\n\treturn fromBytesToKbit(bytes) / seconds;\r\n}\r\n\r\nexport function toMbps(bytes: number, seconds: number): number {\r\n\treturn fromBytesToMbit(bytes) / seconds;\r\n}\r\n\r\nexport function NewObject() {\r\n\treturn {};\r\n}\r\n\r\nexport function noop() {}\r\n\r\nexport function scaleH(ratio: number, width: number): number {\r\n\treturn width / ratio;\r\n}\r\n\r\nexport function scaleW(ratio: number, height: number): number {\r\n\treturn height * ratio;\r\n}\r\n\r\nexport function expectNever(_: never, msg: string): never {\r\n\tthrow new Error(msg);\r\n}\r\n\r\nexport enum UploadStatuses {\r\n\tNone = \"\",\r\n\tAdded = \"added\",\r\n\tQueued = \"queued\",\r\n\tAccepted = \"queued\",\r\n\tUploading = \"uploading\",\r\n\tCanceled = \"canceled\",\r\n\tError = \"error\",\r\n\tTimeout = \"timeout\",\r\n\tSuccess = \"success\",\r\n}\r\n\r\nexport enum ErrType {\r\n\tAny,\r\n\tTimeout,\r\n}\r\n\r\nexport enum VTransmitEvents {\r\n\tInitialize = \"initialize\",\r\n\tAddedFile = \"added-file\",\r\n\tAddedFiles = \"added-files\",\r\n\tRemovedFile = \"removed-file\",\r\n\tAcceptedFile = \"accepted-file\",\r\n\tRejectedFile = \"rejected-file\",\r\n\tAcceptComplete = \"accept-complete\",\r\n\tThumbnail = \"thumbnail\",\r\n\tProcessing = \"processing\",\r\n\tProcessingMultiple = \"processing-multiple\",\r\n\tCanceled = \"canceled\",\r\n\tCanceledMultiple = \"canceled-multiple\",\r\n\tSending = \"sending\",\r\n\tSendingMultiple = \"sending-multiple\",\r\n\tTimeout = \"timeout\",\r\n\tTimeoutMultiple = \"timeout-multiple\",\r\n\tUploadProgress = \"upload-progress\",\r\n\tTotalUploadProgress = \"total-upload-progress\",\r\n\tSuccess = \"success\",\r\n\tSuccessMultiple = \"success-multiple\",\r\n\tQueueComplete = \"queue-complete\",\r\n\tComplete = \"complete\",\r\n\tCompleteMultiple = \"complete-multiple\",\r\n\tError = \"error\",\r\n\tErrorMultiple = \"error-multiple\",\r\n\tMaxFilesReached = \"max-files-reached\",\r\n\tMaxFilesExceeded = \"max-files-exceeded\",\r\n\tReset = \"reset\",\r\n\tDragOver = \"drag-over\",\r\n\tDragEnter = \"drag-enter\",\r\n\tDragLeave = \"drag-leave\",\r\n\tDragEnd = \"drag-end\",\r\n\tDrop = \"drop\",\r\n\tPaste = \"paste\",\r\n}\r\n\r\n/**\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\r\n */\r\nexport interface DrawImageArgs {\r\n\tsx: number;\r\n\tsy: number;\r\n\tsWidth: number;\r\n\tsHeight: number;\r\n\tdx: number;\r\n\tdy: number;\r\n\tdWidth: number;\r\n\tdHeight: number;\r\n}\r\n\r\nexport interface Dimensions {\r\n\twidth: number;\r\n\theight: number;\r\n}\r\n\r\nexport function resizeImg(\r\n\tfile: VTransmitFile,\r\n\tdims: Dimensions\r\n): DrawImageArgs {\r\n\t// 's' variables are for source\r\n\t// 'd' variables are for destination\r\n\tconst sRatio = file.width / file.height;\r\n\tconst dRatio = dims.width / dims.height;\r\n\tconst coords: DrawImageArgs = {\r\n\t\tsx: 0,\r\n\t\tsy: 0,\r\n\t\tsWidth: file.width,\r\n\t\tsHeight: file.height,\r\n\t\tdx: 0,\r\n\t\tdy: 0,\r\n\t\tdWidth: dims.width,\r\n\t\tdHeight: dims.height,\r\n\t};\r\n\r\n\tlet w, h;\r\n\tif (dRatio > sRatio) {\r\n\t\tw = file.width;\r\n\t\th = scaleH(dRatio, file.width);\r\n\t} else {\r\n\t\tw = scaleW(dRatio, file.height);\r\n\t\th = file.height;\r\n\t}\r\n\r\n\tif (w < file.width) {\r\n\t\tcoords.sx = (file.width - w) / 2;\r\n\t\tcoords.sWidth = w;\r\n\t}\r\n\tif (h < file.height) {\r\n\t\tcoords.sy = (file.height - h) / 2;\r\n\t\tcoords.sHeight = h;\r\n\t}\r\n\r\n\treturn coords;\r\n}\r\n\r\nexport function webkitIsFile(\r\n\tentry: WebKitFileEntry | WebKitDirectoryEntry\r\n): entry is WebKitFileEntry {\r\n\treturn entry.isFile;\r\n}\r\n\r\nexport function webkitIsDir(\r\n\tentry: WebKitFileEntry | WebKitDirectoryEntry\r\n): entry is WebKitDirectoryEntry {\r\n\treturn entry.isDirectory;\r\n}\r\n","import { uniqueId, round, toKbps, toMbps } from \"../core/utils\";\r\nimport { UploadStatuses } from \"../core/utils\";\r\n\r\nexport interface UploadStats {\r\n\tbytesSent: number;\r\n\tprogress: number;\r\n\ttotal: number;\r\n\tspeed: SpeedStats;\r\n\tstart: number;\r\n\tend: number;\r\n\ttime: number;\r\n}\r\n\r\nexport interface SpeedStats {\r\n\tkbps: number;\r\n\tmbps: number;\r\n}\r\n\r\nexport class VTransmitFile {\r\n\tprivate _dataUrl: string = \"\";\r\n\t/**\r\n\t * The browser native file object obtained from the file input.\r\n\t */\r\n\tpublic nativeFile: File;\r\n\tpublic id: string = VTransmitFile.idFactory();\r\n\tpublic status: UploadStatuses = UploadStatuses.None;\r\n\tpublic accepted: boolean = false; // Passed all validation.\r\n\tpublic lastModified: number;\r\n\tpublic lastModifiedDate: Date;\r\n\tpublic name: string;\r\n\tpublic processing: boolean = false;\r\n\tpublic size: number;\r\n\tpublic type: string;\r\n\tpublic webkitRelativePath: USVString;\r\n\tpublic width: number = 0;\r\n\tpublic height: number = 0;\r\n\tpublic errorMessage: string = \"\";\r\n\tpublic thumbnailLoaded: boolean = false;\r\n\r\n\t/**\r\n\t * `adapterData` is data meant for use by an upload adapter only.\r\n\t */\r\n\tpublic driverData: AnyObject = {};\r\n\t/**\r\n\t * `meta` is a place to add custom properties.\r\n\t */\r\n\tpublic meta: AnyObject = {};\r\n\tpublic upload: UploadStats = {\r\n\t\tbytesSent: 0,\r\n\t\tprogress: 0,\r\n\t\ttotal: 0,\r\n\t\tspeed: {\r\n\t\t\tkbps: 0,\r\n\t\t\tmbps: 0,\r\n\t\t},\r\n\t\tstart: 0,\r\n\t\tend: 0,\r\n\t\ttime: 0,\r\n\t};\r\n\r\n\tconstructor(file: File) {\r\n\t\tthis.nativeFile = file;\r\n\t\tthis.lastModified = file.lastModified;\r\n\t\tthis.lastModifiedDate = file.lastModifiedDate;\r\n\t\tthis.name = file.name;\r\n\t\tthis.size = file.size;\r\n\t\tthis.type = file.type;\r\n\t\tthis.webkitRelativePath = file.webkitRelativePath;\r\n\t\tthis.upload.total = file.size;\r\n\t}\r\n\r\n\thandleProgress(e: ProgressEvent): void {\r\n\t\tthis.startProgress();\r\n\t\tconst total = e.total || this.upload.total;\r\n\t\tthis.upload.progress = Math.min(100, 100 * e.loaded / total);\r\n\t\tthis.upload.bytesSent = e.loaded;\r\n\t\tthis.upload.total = total;\r\n\t\tthis.upload.time = (Date.now() - this.upload.start) / 1000;\r\n\t\t// Recalculate the upload speed in bytes/sec\r\n\t\tthis.upload.speed.kbps = round(\r\n\t\t\ttoKbps(this.upload.bytesSent, this.upload.time)\r\n\t\t);\r\n\t\tthis.upload.speed.mbps = round(\r\n\t\t\ttoMbps(this.upload.bytesSent, this.upload.time)\r\n\t\t);\r\n\t\tif (this.upload.progress === 100) {\r\n\t\t\tthis.endProgress();\r\n\t\t}\r\n\t}\r\n\r\n\tstartProgress(): VTransmitFile {\r\n\t\t// Avoid starting twice\r\n\t\tif (!this.upload.start) {\r\n\t\t\tthis.upload.start = Date.now();\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tendProgress(): VTransmitFile {\r\n\t\t// Avoid ending twice\r\n\t\tif (!this.upload.end) {\r\n\t\t\tthis.upload.end = Date.now();\r\n\t\t\tthis.upload.time = (Date.now() - this.upload.start) / 1000;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget dataUrl() {\r\n\t\treturn this.thumbnailLoaded ? this._dataUrl : \"\";\r\n\t}\r\n\r\n\tset dataUrl(value) {\r\n\t\t// Use non-enumerable data url to avoid copying around large data sets\r\n\t\tObject.defineProperty(this, \"_dataUrl\", {\r\n\t\t\tvalue,\r\n\t\t\tenumerable: false,\r\n\t\t\tconfigurable: true,\r\n\t\t\twritable: true,\r\n\t\t});\r\n\t\tthis.thumbnailLoaded = true;\r\n\t}\r\n\r\n\tstatic idFactory() {\r\n\t\treturn uniqueId(\"vt_\");\r\n\t}\r\n}\r\n","import { VTransmitFile } from \"../classes/VTransmitFile\";\r\nimport { VTransmitUploadContext } from \"../classes/VTransmitUploadContext\";\r\nimport { DriverInterface, UploadResult } from \"../core/interfaces\";\r\nimport {\r\n\tVTransmitEvents,\r\n\tUploadStatuses,\r\n\tErrType,\r\n\tis_function,\r\n} from \"../core/utils\";\r\n\r\nexport type ParamName = string | ((file: VTransmitFile) => string);\r\nexport type StaticOrDynamic<T> = T | ((files: VTransmitFile[]) => T);\r\n\r\nfunction resolveStaticOrDynamic<T>(\r\n\tx: StaticOrDynamic<T>,\r\n\tfiles: VTransmitFile[]\r\n): T {\r\n\tif (is_function(x)) {\r\n\t\treturn x(files);\r\n\t}\r\n\r\n\treturn x;\r\n}\r\n\r\nexport enum ParamNameStyle {\r\n\tEmpty,\r\n\tIndexed,\r\n\tBrackets,\r\n}\r\n\r\n/**\r\n * Responsibilities:\r\n * - send and manage upload via transport\r\n * - on progress: emit progress stats\r\n * - on error: emit to vue-transmit & update file status\r\n * - on timeout: emit to vue-transmit & update file status\r\n * - on error: emit to vue-transmit & update file status\r\n * - on success: emit to vue-transmit & update file status\r\n * - once complete: emit to vue-transmit & update file status\r\n */\r\nexport type XHRDriverOptions<T = any> = {\r\n\t/**\r\n\t * A string representing the URL to send the request to\r\n\t * or a function called with an array of files for the upload\r\n\t * that returns a string url.\r\n\t */\r\n\turl: StaticOrDynamic<string>;\r\n\t/**\r\n\t * The HTTP method to use, such as \"GET\", \"POST\", \"PUT\", \"DELETE\", etc.\r\n\t * Ignored for non-HTTP(S) URLs.\r\n\t *\r\n\t * ```\r\n\t * // default => \"post\"\r\n\t * ```\r\n\t */\r\n\tmethod?: StaticOrDynamic<string>;\r\n\t/**\r\n\t * The XMLHttpRequest.withCredentials property is a Boolean that indicates\r\n\t * whether or not cross-site Access-Control requests should be made using\r\n\t * credentials such as cookies, authorization headers or TLS client\r\n\t * certificates. Setting withCredentials has no effect on same-site requests.\r\n\t */\r\n\twithCredentials?: StaticOrDynamic<boolean>;\r\n\t/**\r\n\t * The XMLHttpRequest.timeout property is an unsigned long representing the\r\n\t * number of milliseconds a request can take before automatically being\r\n\t * terminated. The default value is 0, which means there is no timeout.\r\n\t * Timeout shouldn't be used for synchronous XMLHttpRequests requests used in\r\n\t * a document environment or it will throw an InvalidAccessError exception.\r\n\t * When a timeout happens, a timeout event is fired.\r\n\t */\r\n\ttimeout?: StaticOrDynamic<number>;\r\n\t/**\r\n\t * The name of the file param that gets transferred.\r\n\t */\r\n\tparamName?: ParamName;\r\n\t/**\r\n\t * The param name syntax for multiple uploads.\r\n\t *\r\n\t * **Options:**\r\n\t * - `0 (Empty)` _(Default)_ Adds nothing to the paramName: `file`\r\n\t * - `1 (Indexed)` Adds the array index of the file: `file[0]`\r\n\t * - `2 (Brackets)` Adds the array-like brackets without index: `file[]`\r\n\t */\r\n\tmultipleParamNameStyle?: ParamNameStyle;\r\n\t/**\r\n\t * An object of additional parameters to transfer to the server.\r\n\t * This is the same as adding hidden input fields in the form element.\r\n\t */\r\n\tparams?: StaticOrDynamic<Dictionary<string>>;\r\n\theaders?: StaticOrDynamic<Dictionary<string>>;\r\n\t/**\r\n\t * The XMLHttpRequest.responseType property is an enumerated value that\r\n\t * returns the type of response. It also lets the author change the response\r\n\t * type. If an empty string is set as the value of responseType, the default\r\n\t * value text will be used.\r\n\t *\r\n\t * Setting the value of responseType to \"document\" is ignored if done in a\r\n\t * Worker environment. When setting responseType to a particular value,\r\n\t * the author should make sure that the server is actually sending a response\r\n\t * compatible to that format. If the server returns data that is not\r\n\t * compatible to the responseType that was set, the value of response will be\r\n\t * null. Also, setting responseType for synchronous requests will throw an\r\n\t * InvalidAccessError exception.\r\n\t */\r\n\tresponseType?: StaticOrDynamic<XMLHttpRequestResponseType>;\r\n\t/**\r\n\t * responseParseFunc is a function that given an XMLHttpRequest\r\n\t * returns a response object. Allows for custom response parsing.\r\n\t */\r\n\tresponseParseFunc?: (xhr: XMLHttpRequest) => T;\r\n\terrUploadError?: (xhr: XMLHttpRequest) => string;\r\n\terrUploadTimeout?: (xhr: XMLHttpRequest) => string;\r\n\trenameFile?: (name: string) => string;\r\n};\r\n\r\nexport type XHRUploadGroup = {\r\n\tid: number;\r\n\tfiles: VTransmitFile[];\r\n\txhr: XMLHttpRequest;\r\n};\r\n\r\nlet group_id = 0;\r\n\r\nexport class XHRDriver<T = any> implements DriverInterface {\r\n\tpublic context: VTransmitUploadContext;\r\n\tpublic url: StaticOrDynamic<string>;\r\n\tpublic method: StaticOrDynamic<string>;\r\n\tpublic withCredentials: StaticOrDynamic<boolean>;\r\n\tpublic timeout: StaticOrDynamic<number>;\r\n\tpublic paramName: ParamName;\r\n\tpublic multipleParamNameStyle: ParamNameStyle;\r\n\tpublic params: StaticOrDynamic<Dictionary<string>>;\r\n\tpublic headers: StaticOrDynamic<Dictionary<string>>;\r\n\tpublic responseType: StaticOrDynamic<XMLHttpRequestResponseType>;\r\n\tpublic errUploadError: (xhr: XMLHttpRequest) => string;\r\n\tpublic errUploadTimeout: (xhr: XMLHttpRequest) => string;\r\n\tpublic renameFile: (name: string) => string;\r\n\tpublic responseParseFunc?: (xhr: XMLHttpRequest) => T;\r\n\r\n\tprivate uploadGroups: { [key: number]: XHRUploadGroup } = Object.create(\r\n\t\tnull\r\n\t);\r\n\r\n\tconstructor(context: VTransmitUploadContext, options: XHRDriverOptions<T>) {\r\n\t\tlet {\r\n\t\t\turl,\r\n\t\t\tmethod = \"post\",\r\n\t\t\twithCredentials = false,\r\n\t\t\ttimeout = 0,\r\n\t\t\tparamName = \"file\",\r\n\t\t\tmultipleParamNameStyle = ParamNameStyle.Empty,\r\n\t\t\tparams = Object.create(null),\r\n\t\t\theaders = {\r\n\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t\"Cache-Control\": \"no-cache\",\r\n\t\t\t\t\"X-Requested-With\": \"XMLHttpRequest\",\r\n\t\t\t},\r\n\t\t\tresponseType = \"json\",\r\n\t\t\tresponseParseFunc,\r\n\t\t\terrUploadError = (xhr: XMLHttpRequest) =>\r\n\t\t\t\t`Error during upload: ${xhr.statusText} [${xhr.status}]`,\r\n\t\t\terrUploadTimeout = (_xhr: XMLHttpRequest) =>\r\n\t\t\t\t`Error during upload: the server timed out.`,\r\n\t\t\trenameFile = (name: string) => name,\r\n\t\t} = options;\r\n\r\n\t\tif (!url) {\r\n\t\t\tthrow new TypeError(\r\n\t\t\t\t`${\r\n\t\t\t\t\tthis.constructor.name\r\n\t\t\t\t} requires a 'url' parameter. Supply a string or a function returning a string.`\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.context = context;\r\n\t\tthis.url = url;\r\n\t\tthis.method = method;\r\n\t\tthis.withCredentials = withCredentials;\r\n\t\tthis.timeout = timeout;\r\n\t\tthis.paramName = paramName;\r\n\t\tthis.multipleParamNameStyle = multipleParamNameStyle;\r\n\t\tthis.params = params;\r\n\t\tthis.headers = headers;\r\n\t\tthis.responseType = responseType;\r\n\t\tthis.responseParseFunc = responseParseFunc;\r\n\t\tthis.errUploadError = errUploadError;\r\n\t\tthis.errUploadTimeout = errUploadTimeout;\r\n\t\tthis.renameFile = renameFile;\r\n\t}\r\n\r\n\tuploadFiles(files: VTransmitFile[]): Promise<UploadResult<T>> {\r\n\t\treturn new Promise(resolve => {\r\n\t\t\tif (!this.url) {\r\n\t\t\t\treturn resolve({\r\n\t\t\t\t\tok: false,\r\n\t\t\t\t\terr: {\r\n\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\tmessage: `Missing upload URL.`,\r\n\t\t\t\t\t\tdata: this.url,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\tconst updateProgress = this.handleUploadProgress(files);\r\n\t\t\tconst id = group_id++;\r\n\t\t\tconst params = resolveStaticOrDynamic(this.params, files);\r\n\t\t\tconst headers = resolveStaticOrDynamic(this.headers, files);\r\n\r\n\t\t\tthis.uploadGroups[id] = { id, xhr, files };\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tfile.driverData.groupID = id;\r\n\t\t\t\tfile.startProgress();\r\n\t\t\t}\r\n\r\n\t\t\txhr.open(\r\n\t\t\t\tresolveStaticOrDynamic(this.method, files),\r\n\t\t\t\tresolveStaticOrDynamic(this.url, files),\r\n\t\t\t\ttrue\r\n\t\t\t);\r\n\t\t\t// Setting the timeout after open because of IE11 issue:\r\n\t\t\t// @link https://gitlab.com/meno/dropzone/issues/8\r\n\t\t\txhr.timeout = resolveStaticOrDynamic(this.timeout, files);\r\n\t\t\txhr.withCredentials = resolveStaticOrDynamic(\r\n\t\t\t\tthis.withCredentials,\r\n\t\t\t\tfiles\r\n\t\t\t);\r\n\t\t\txhr.responseType = resolveStaticOrDynamic(this.responseType, files);\r\n\r\n\t\t\txhr.addEventListener(\"error\", () => {\r\n\t\t\t\tthis.rmGroup(id);\r\n\t\t\t\tresolve({\r\n\t\t\t\t\tok: false,\r\n\t\t\t\t\terr: {\r\n\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\tmessage: this.errUploadError(xhr),\r\n\t\t\t\t\t\tdata: xhr,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\txhr.upload.addEventListener(\"progress\", updateProgress);\r\n\t\t\txhr.addEventListener(\"timeout\", () => {\r\n\t\t\t\tthis.rmGroup(id);\r\n\t\t\t\tresolve({\r\n\t\t\t\t\tok: false,\r\n\t\t\t\t\terr: {\r\n\t\t\t\t\t\ttype: ErrType.Timeout,\r\n\t\t\t\t\t\tmessage: this.errUploadTimeout(xhr),\r\n\t\t\t\t\t\tdata: xhr,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\txhr.addEventListener(\"load\", () => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tfiles[0].status === UploadStatuses.Canceled ||\r\n\t\t\t\t\txhr.readyState !== XMLHttpRequest.DONE\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// The XHR is complete, so remove the group\r\n\t\t\t\tthis.rmGroup(id);\r\n\r\n\t\t\t\tlet response: T;\r\n\t\t\t\tif (this.responseParseFunc) {\r\n\t\t\t\t\tresponse = this.responseParseFunc(xhr);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresponse = xhr.response;\r\n\r\n\t\t\t\t\tif (!xhr.responseType) {\r\n\t\t\t\t\t\tlet contentType = xhr.getResponseHeader(\"content-type\");\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tcontentType &&\r\n\t\t\t\t\t\t\tcontentType.indexOf(\"application/json\") > -1\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tresponse = JSON.parse(xhr.responseText);\r\n\t\t\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t\t\treturn resolve({\r\n\t\t\t\t\t\t\t\t\tok: false,\r\n\t\t\t\t\t\t\t\t\terr: {\r\n\t\t\t\t\t\t\t\t\t\tmessage: \"Invalid JSON response from server.\",\r\n\t\t\t\t\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\t\t\t\t\tdata: err,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Called on load (complete) to complete progress tracking logic.\r\n\t\t\t\tupdateProgress();\r\n\t\t\t\tif (xhr.status < 200 || xhr.status >= 300) {\r\n\t\t\t\t\treturn resolve({\r\n\t\t\t\t\t\tok: false,\r\n\t\t\t\t\t\terr: {\r\n\t\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\t\tmessage: this.errUploadError(xhr),\r\n\t\t\t\t\t\t\tdata: xhr,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn resolve({\r\n\t\t\t\t\tok: true,\r\n\t\t\t\t\tdata: response,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tfor (const headerName of Object.keys(headers)) {\r\n\t\t\t\tif (headers[headerName]) {\r\n\t\t\t\t\txhr.setRequestHeader(headerName, headers[headerName]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst formData = new FormData();\r\n\t\t\tfor (const key of Object.keys(params)) {\r\n\t\t\t\tformData.append(key, params[key]);\r\n\t\t\t}\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tthis.context.emit(VTransmitEvents.Sending, file, xhr, formData);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.context.props.uploadMultiple) {\r\n\t\t\t\tthis.context.emit(\r\n\t\t\t\t\tVTransmitEvents.SendingMultiple,\r\n\t\t\t\t\tfiles,\r\n\t\t\t\t\txhr,\r\n\t\t\t\t\tformData\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0, len = files.length; i < len; i++) {\r\n\t\t\t\tformData.append(\r\n\t\t\t\t\tthis.getParamName(files[i], i),\r\n\t\t\t\t\tfiles[i].nativeFile,\r\n\t\t\t\t\tthis.renameFile(files[i].name)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\txhr.send(formData);\r\n\t\t});\r\n\t}\r\n\r\n\thandleUploadProgress(files: VTransmitFile[]): (e?: ProgressEvent) => void {\r\n\t\tconst vm = this.context.vtransmit;\r\n\r\n\t\treturn function onProgressFn(e?: ProgressEvent): void {\r\n\t\t\tif (!e) {\r\n\t\t\t\tlet allFilesFinished = true;\r\n\r\n\t\t\t\tfor (const file of files) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tfile.upload.progress !== 100 ||\r\n\t\t\t\t\t\tfile.upload.bytesSent !== file.upload.total\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tallFilesFinished = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfile.upload.progress = 100;\r\n\t\t\t\t\tfile.upload.bytesSent = file.upload.total;\r\n\t\t\t\t\tfile.endProgress();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (allFilesFinished) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tif (e) {\r\n\t\t\t\t\tfile.handleProgress(e);\r\n\t\t\t\t}\r\n\t\t\t\tvm.$emit(\r\n\t\t\t\t\tVTransmitEvents.UploadProgress,\r\n\t\t\t\t\tfile,\r\n\t\t\t\t\tfile.upload.progress,\r\n\t\t\t\t\tfile.upload.bytesSent\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tgetParamName(file: VTransmitFile, index: string | number): string {\r\n\t\tlet paramName: string;\r\n\t\tif (is_function(this.paramName)) {\r\n\t\t\tparamName = this.paramName(file);\r\n\t\t} else {\r\n\t\t\tparamName = this.paramName;\r\n\t\t}\r\n\r\n\t\tif (!this.context.props.uploadMultiple) {\r\n\t\t\treturn paramName;\r\n\t\t}\r\n\r\n\t\tswitch (this.multipleParamNameStyle) {\r\n\t\t\tcase ParamNameStyle.Indexed:\r\n\t\t\t\tparamName += `[${index}]`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ParamNameStyle.Brackets:\r\n\t\t\t\tparamName += `[]`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ParamNameStyle.Empty:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn paramName;\r\n\t}\r\n\r\n\tcancelUpload(file: VTransmitFile): VTransmitFile[] {\r\n\t\tlet group = this.uploadGroups[file.driverData.groupID];\r\n\t\tif (!group) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tgroup.xhr.abort();\r\n\t\tthis.rmGroup(file.driverData.groupID);\r\n\r\n\t\treturn [...group.files];\r\n\t}\r\n\r\n\trmGroup(id: number) {\r\n\t\tdelete this.uploadGroups[id];\r\n\t}\r\n}\r\n","import VueTransmit from \"../components/VueTransmit.vue\";\r\nimport { VTransmitFile } from \"./VTransmitFile\";\r\nimport { UploadStatuses } from \"../core/utils\";\r\n\r\nexport class VTransmitUploadContext {\r\n\tpublic Statuses = UploadStatuses;\r\n\tpublic props: AnyObject;\r\n\r\n\tconstructor(public vtransmit: VueTransmit) {\r\n\t\tthis.props = vtransmit.$props;\r\n\t}\r\n\r\n\tpublic emit(event: string, ...args: any[]) {\r\n\t\tthis.vtransmit.$emit(event, ...args);\r\n\t}\r\n\r\n\tpublic get acceptedFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).acceptedFiles;\r\n\t}\r\n\r\n\tpublic get rejectedFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).rejectedFiles;\r\n\t}\r\n\r\n\tpublic get addedFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).addedFiles;\r\n\t}\r\n\r\n\tpublic get queuedFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).queuedFiles;\r\n\t}\r\n\r\n\tpublic get uploadingFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).uploadingFiles;\r\n\t}\r\n\r\n\tpublic get activeFiles(): VTransmitFile[] {\r\n\t\treturn (this.vtransmit as any).activeFiles;\r\n\t}\r\n}\r\n","import { VTransmitFile } from \"../classes/VTransmitFile\";\r\nimport { VTransmitUploadContext } from \"../classes/VTransmitUploadContext\";\r\nimport { DriverInterface, UploadResult } from \"..\";\r\nimport { VTransmitEvents, ErrType, is_function } from \"../core/utils\";\r\n\r\nexport type ParamName = string | ((file: VTransmitFile) => string);\r\nexport type StaticOrDynamic<T> = T | ((files: VTransmitFile[]) => T);\r\n\r\nfunction resolveStaticOrDynamic<T>(\r\n\tx: StaticOrDynamic<T>,\r\n\tfiles: VTransmitFile[]\r\n): T {\r\n\tif (is_function(x)) {\r\n\t\treturn x(files);\r\n\t}\r\n\r\n\treturn x;\r\n}\r\n\r\nexport enum ParamNameStyle {\r\n\tEmpty,\r\n\tIndexed,\r\n\tBrackets,\r\n}\r\n\r\n/**\r\n * Responsibilities:\r\n * - send and manage upload via transport\r\n * - on progress: emit progress stats\r\n * - on error: emit to vue-transmit & update file status\r\n * - on timeout: emit to vue-transmit & update file status\r\n * - on error: emit to vue-transmit & update file status\r\n * - on success: emit to vue-transmit & update file status\r\n * - once complete: emit to vue-transmit & update file status\r\n */\r\nexport type AxiosDriverOptions<T = any> = {\r\n\t/**\r\n\t * A string representing the URL to send the request to\r\n\t * or a function called with an array of files for the upload\r\n\t * that returns a string url.\r\n\t */\r\n\turl: StaticOrDynamic<string>;\r\n\t/**\r\n\t * The HTTP method to use, such as \"GET\", \"POST\", \"PUT\", \"DELETE\", etc.\r\n\t * Ignored for non-HTTP(S) URLs.\r\n\t *\r\n\t * ```\r\n\t * // default => \"post\"\r\n\t * ```\r\n\t */\r\n\tmethod?: StaticOrDynamic<string>;\r\n\t/**\r\n\t * The XMLHttpRequest.withCredentials property is a Boolean that indicates\r\n\t * whether or not cross-site Access-Control requests should be made using\r\n\t * credentials such as cookies, authorization headers or TLS client\r\n\t * certificates. Setting withCredentials has no effect on same-site requests.\r\n\t */\r\n\twithCredentials?: StaticOrDynamic<boolean>;\r\n\t/**\r\n\t * The XMLHttpRequest.timeout property is an unsigned long representing the\r\n\t * number of milliseconds a request can take before automatically being\r\n\t * terminated. The default value is 0, which means there is no timeout.\r\n\t * Timeout shouldn't be used for synchronous XMLHttpRequests requests used in\r\n\t * a document environment or it will throw an InvalidAccessError exception.\r\n\t * When a timeout happens, a timeout event is fired.\r\n\t */\r\n\ttimeout?: StaticOrDynamic<number>;\r\n\t/**\r\n\t * The name of the file param that gets transferred.\r\n\t */\r\n\tparamName?: ParamName;\r\n\t/**\r\n\t * The param name syntax for multiple uploads.\r\n\t *\r\n\t * **Options:**\r\n\t * - `0 (Empty)` _(Default)_ Adds nothing to the paramName: `file`\r\n\t * - `1 (Indexed)` Adds the array index of the file: `file[0]`\r\n\t * - `2 (Brackets)` Adds the array-like brackets without index: `file[]`\r\n\t */\r\n\tmultipleParamNameStyle?: ParamNameStyle;\r\n\t/**\r\n\t * An object of additional parameters to transfer to the server.\r\n\t * This is the same as adding hidden input fields in the form element.\r\n\t */\r\n\tparams?: StaticOrDynamic<Dictionary<string>>;\r\n\theaders?: StaticOrDynamic<Dictionary<string>>;\r\n\t/**\r\n\t * The XMLHttpRequest.responseType property is an enumerated value that\r\n\t * returns the type of response. It also lets the author change the response\r\n\t * type. If an empty string is set as the value of responseType, the default\r\n\t * value text will be used.\r\n\t *\r\n\t * Setting the value of responseType to \"document\" is ignored if done in a\r\n\t * Worker environment. When setting responseType to a particular value,\r\n\t * the author should make sure that the server is actually sending a response\r\n\t * compatible to that format. If the server returns data that is not\r\n\t * compatible to the responseType that was set, the value of response will be\r\n\t * null. Also, setting responseType for synchronous requests will throw an\r\n\t * InvalidAccessError exception.\r\n\t */\r\n\tresponseType?: StaticOrDynamic<XMLHttpRequestResponseType>;\r\n\t/**\r\n\t * responseParseFunc is a function that given an XMLHttpRequest\r\n\t * returns a response object. Allows for custom response parsing.\r\n\t */\r\n\tresponseParseFunc?: (xhr: XMLHttpRequest) => T;\r\n\terrUploadError?: (xhr: XMLHttpRequest) => string;\r\n\terrUploadTimeout?: (xhr: XMLHttpRequest) => string;\r\n\trenameFile?: (name: string) => string;\r\n\thttp: any;\r\n};\r\n\r\nexport type XHRUploadGroup = {\r\n\tid: number;\r\n\tfiles: VTransmitFile[];\r\n\txhr: XMLHttpRequest;\r\n};\r\n\r\nlet group_id = 0;\r\n\r\nexport class AxiosDriver<T = any> implements DriverInterface {\r\n\tpublic context: VTransmitUploadContext;\r\n\tpublic url: StaticOrDynamic<string>;\r\n\tpublic method: StaticOrDynamic<string>;\r\n\tpublic withCredentials: StaticOrDynamic<boolean>;\r\n\tpublic timeout: StaticOrDynamic<number>;\r\n\tpublic paramName: ParamName;\r\n\tpublic multipleParamNameStyle: ParamNameStyle;\r\n\tpublic params: StaticOrDynamic<Dictionary<string>>;\r\n\tpublic headers: StaticOrDynamic<Dictionary<string>>;\r\n\tpublic responseType: StaticOrDynamic<XMLHttpRequestResponseType>;\r\n\tpublic errUploadError: (xhr: XMLHttpRequest) => string;\r\n\tpublic errUploadTimeout: (xhr: XMLHttpRequest) => string;\r\n\tpublic renameFile: (name: string) => string;\r\n\tpublic responseParseFunc?: (xhr: XMLHttpRequest) => T;\r\n\tpublic http: any;\r\n\r\n\tprivate uploadGroups: { [key: number]: XHRUploadGroup } = Object.create(\r\n\t\tnull\r\n\t);\r\n\r\n\tconstructor(\r\n\t\tcontext: VTransmitUploadContext,\r\n\t\toptions: AxiosDriverOptions<T>\r\n\t) {\r\n\t\tlet {\r\n\t\t\turl,\r\n\t\t\tmethod = \"post\",\r\n\t\t\twithCredentials = false,\r\n\t\t\ttimeout = 0,\r\n\t\t\tparamName = \"file\",\r\n\t\t\tmultipleParamNameStyle = ParamNameStyle.Empty,\r\n\t\t\tparams = Object.create(null),\r\n\t\t\theaders = {\r\n\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t\"Cache-Control\": \"no-cache\",\r\n\t\t\t\t\"X-Requested-With\": \"XMLHttpRequest\",\r\n\t\t\t},\r\n\t\t\tresponseType = \"json\",\r\n\t\t\tresponseParseFunc,\r\n\t\t\terrUploadError = (xhr: XMLHttpRequest) =>\r\n\t\t\t\t`Error during upload: ${xhr.statusText} [${xhr.status}]`,\r\n\t\t\terrUploadTimeout = (_xhr: XMLHttpRequest) =>\r\n\t\t\t\t`Error during upload: the server timed out.`,\r\n\t\t\trenameFile = (name: string) => name,\r\n\t\t\thttp,\r\n\t\t} = options;\r\n\r\n\t\tif (!url) {\r\n\t\t\tthrow new TypeError(\r\n\t\t\t\t`${\r\n\t\t\t\t\tthis.constructor.name\r\n\t\t\t\t} requires a 'url' parameter. Supply a string or a function returning a string.`\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.context = context;\r\n\t\tthis.url = url;\r\n\t\tthis.method = method;\r\n\t\tthis.withCredentials = withCredentials;\r\n\t\tthis.timeout = timeout;\r\n\t\tthis.paramName = paramName;\r\n\t\tthis.multipleParamNameStyle = multipleParamNameStyle;\r\n\t\tthis.params = params;\r\n\t\tthis.headers = headers;\r\n\t\tthis.responseType = responseType;\r\n\t\tthis.responseParseFunc = responseParseFunc;\r\n\t\tthis.errUploadError = errUploadError;\r\n\t\tthis.errUploadTimeout = errUploadTimeout;\r\n\t\tthis.renameFile = renameFile;\r\n\t\tthis.http = http;\r\n\t}\r\n\r\n\tuploadFiles(files: VTransmitFile[]): Promise<UploadResult<T>> {\r\n\t\treturn new Promise(resolve => {\r\n\t\t\tif (!this.url) {\r\n\t\t\t\treturn resolve({\r\n\t\t\t\t\tok: false,\r\n\t\t\t\t\terr: {\r\n\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\tmessage: `Missing upload URL.`,\r\n\t\t\t\t\t\tdata: this.url,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\t//const updateProgress = this.handleUploadProgress(files);\r\n\t\t\tconst id = group_id++;\r\n\t\t\tconst params = resolveStaticOrDynamic(this.params, files);\r\n\r\n\t\t\tthis.uploadGroups[id] = { id, xhr, files };\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tfile.driverData.groupID = id;\r\n\t\t\t\tfile.startProgress();\r\n\t\t\t}\r\n\r\n\t\t\tconst formData = new FormData();\r\n\t\t\tfor (const key of Object.keys(params)) {\r\n\t\t\t\tformData.append(key, params[key]);\r\n\t\t\t}\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tthis.context.emit(VTransmitEvents.Sending, file, xhr, formData);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.context.props.uploadMultiple) {\r\n\t\t\t\tthis.context.emit(\r\n\t\t\t\t\tVTransmitEvents.SendingMultiple,\r\n\t\t\t\t\tfiles,\r\n\t\t\t\t\txhr,\r\n\t\t\t\t\tformData\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0, len = files.length; i < len; i++) {\r\n\t\t\t\tformData.append(\r\n\t\t\t\t\tthis.getParamName(files[i], i),\r\n\t\t\t\t\tfiles[i].nativeFile,\r\n\t\t\t\t\tthis.renameFile(files[i].name)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tthis.http({\r\n\t\t\t\turl: this.url,\r\n\t\t\t\tbody: formData,\r\n\t\t\t\ttimeout: this.timeout,\r\n\t\t\t\twithCredentials: this.withCredentials,\r\n\t\t\t\tonUploadProgress: function(progressEvent?: ProgressEvent) {\r\n\t\t\t\t\tthis.handleProgress(progressEvent);\r\n\t\t\t\t},\r\n\t\t\t\tsuccess: function(response: any) {\r\n\t\t\t\t\treturn resolve({\r\n\t\t\t\t\t\tok: true,\r\n\t\t\t\t\t\tdata: response,\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\terror: function(error: any) {\r\n\t\t\t\t\treturn resolve({\r\n\t\t\t\t\t\tok: false,\r\n\t\t\t\t\t\terr: {\r\n\t\t\t\t\t\t\ttype: ErrType.Any,\r\n\t\t\t\t\t\t\tmessage: error.response.data.message,\r\n\t\t\t\t\t\t\tdata: xhr,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\thandleUploadProgress(files: VTransmitFile[]): (e?: ProgressEvent) => void {\r\n\t\tconst vm = this.context.vtransmit;\r\n\r\n\t\treturn function onProgressFn(e?: ProgressEvent): void {\r\n\t\t\tif (!e) {\r\n\t\t\t\tlet allFilesFinished = true;\r\n\r\n\t\t\t\tfor (const file of files) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tfile.upload.progress !== 100 ||\r\n\t\t\t\t\t\tfile.upload.bytesSent !== file.upload.total\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tallFilesFinished = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfile.upload.progress = 100;\r\n\t\t\t\t\tfile.upload.bytesSent = file.upload.total;\r\n\t\t\t\t\tfile.endProgress();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (allFilesFinished) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tif (e) {\r\n\t\t\t\t\tfile.handleProgress(e);\r\n\t\t\t\t}\r\n\t\t\t\tvm.$emit(\r\n\t\t\t\t\tVTransmitEvents.UploadProgress,\r\n\t\t\t\t\tfile,\r\n\t\t\t\t\tfile.upload.progress,\r\n\t\t\t\t\tfile.upload.bytesSent\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tgetParamName(file: VTransmitFile, index: string | number): string {\r\n\t\tlet paramName: string;\r\n\t\tif (is_function(this.paramName)) {\r\n\t\t\tparamName = this.paramName(file);\r\n\t\t} else {\r\n\t\t\tparamName = this.paramName;\r\n\t\t}\r\n\r\n\t\tif (!this.context.props.uploadMultiple) {\r\n\t\t\treturn paramName;\r\n\t\t}\r\n\r\n\t\tswitch (this.multipleParamNameStyle) {\r\n\t\t\tcase ParamNameStyle.Indexed:\r\n\t\t\t\tparamName += `[${index}]`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ParamNameStyle.Brackets:\r\n\t\t\t\tparamName += `[]`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ParamNameStyle.Empty:\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn paramName;\r\n\t}\r\n\r\n\tcancelUpload(file: VTransmitFile): VTransmitFile[] {\r\n\t\tlet group = this.uploadGroups[file.driverData.groupID];\r\n\t\tif (!group) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tgroup.xhr.abort();\r\n\t\tthis.rmGroup(file.driverData.groupID);\r\n\r\n\t\treturn [...group.files];\r\n\t}\r\n\r\n\trmGroup(id: number) {\r\n\t\tdelete this.uploadGroups[id];\r\n\t}\r\n}\r\n","<template>\r\n   <component :is=\"tag\">\r\n      <slot v-if=\"filesSlotFirst\"\r\n            name=\"files\"\r\n            v-bind=\"fileSlotBindings\" />\r\n      <div class=\"v-transmit__upload-area\"\r\n           :class=\"[isDraggingClass, uploadAreaClasses]\"\r\n           :draggable=\"!disableDraggable\"\r\n           v-bind=\"uploadAreaAttrs\"\r\n           v-on=\"uploadAreaListeners\"\r\n           @click=\"handleClickUploaderAction\"\r\n           @dragstart=\"handleDragStart\"\r\n           @dragend=\"handleDragEnd\"\r\n           @dragenter.prevent.stop=\"handleDragEnter\"\r\n           @dragover.prevent.stop=\"handleDragOver\"\r\n           @dragleave=\"handleDragLeave\"\r\n           @drop.prevent.stop=\"handleDrop\">\r\n         <slot></slot>\r\n      </div>\r\n      <slot v-if=\"!filesSlotFirst\"\r\n            name=\"files\"\r\n            v-bind=\"fileSlotBindings\" />\r\n      <form :style=\"formStyles\"\r\n            ref=\"uploadForm\">\r\n         <input type=\"file\"\r\n                ref=\"hiddenFileInput\"\r\n                :multiple=\"multiple\"\r\n                :class=\"[maxFilesReachedClass]\"\r\n                :accept=\"filesToAccept\"\r\n                :capture=\"capture\"\r\n                @change=\"onFileInputChange\">\r\n      </form>\r\n   </component :is=\"tag\">\r\n</template>\r\n\r\n<style>\r\n.v-transmit__upload-area {\r\n\twidth: 100%;\r\n\tborder-radius: 1rem;\r\n\tborder: 2px dashed #bdbdbd;\r\n\tmin-height: 30vh;\r\n}\r\n\r\n@media (min-height: 1000px) {\r\n\t.v-transmit__upload-area {\r\n\t\tmin-height: 300px;\r\n\t}\r\n}\r\n\r\n.v-transmit__upload-area--is-dragging {\r\n\tbackground: #e1f5fe\r\n\t\tlinear-gradient(\r\n\t\t\t-45deg,\r\n\t\t\t#fafafa 25%,\r\n\t\t\ttransparent 25%,\r\n\t\t\ttransparent 50%,\r\n\t\t\t#fafafa 50%,\r\n\t\t\t#fafafa 75%,\r\n\t\t\ttransparent 75%,\r\n\t\t\ttransparent\r\n\t\t);\r\n\tbackground-size: 40px 40px;\r\n}\r\n</style>\r\n\r\n<script lang=\"ts\">\r\n// @ts-ignore\r\nimport Vue, { VueConstructor } from \"vue\";\r\nimport {\r\n\tNewObject,\r\n\tnoop,\r\n\tresizeImg,\r\n\twebkitIsFile,\r\n\twebkitIsDir,\r\n\tUploadStatuses,\r\n\tVTransmitEvents,\r\n\tround,\r\n\texpectNever,\r\n\tErrType,\r\n} from \"../core/utils\";\r\nimport { VTransmitFile } from \"../classes/VTransmitFile\";\r\nimport { VTransmitUploadContext } from \"../classes/VTransmitUploadContext\";\r\nimport { XHRDriver } from \"../upload-drivers/xhr\";\r\nimport { DriverInterface, DriverConstructor } from \"../core/interfaces\";\r\n\r\ntype FileSystemEntry = WebKitFileEntry | WebKitDirectoryEntry;\r\n\r\nexport default Vue.extend({\r\n\tname: \"VueTransmit\",\r\n\r\n\tprops: {\r\n\t\ttag: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: \"div\",\r\n\t\t},\r\n\t\tdisableDraggable: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\tuploadAreaClasses: {\r\n\t\t\ttype: [Array, Object, String],\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\tuploadAreaAttrs: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: NewObject,\r\n\t\t},\r\n\t\tuploadAreaListeners: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: NewObject,\r\n\t\t},\r\n\t\tdragClass: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\tfilesSlotFirst: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Sets the maximum number of uploads that can be running at a given time.\r\n\t\t */\r\n\t\tmaxConcurrentUploads: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 2,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Whether to send multiple files in one request.\r\n\t\t */\r\n\t\tuploadMultiple: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Size in MB by default, or MiB if useBinarySizeBase == true\r\n\t\t */\r\n\t\tmaxFileSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 256,\r\n\t\t},\r\n\t\t/**\r\n\t\t * By default, a base 10 size is used. This corresponds to KB, MB, GB, etc.\r\n\t\t * If this property is true, a binary base will be used. This would\r\n\t\t * correspond to KiB, MiB, GiB.\r\n\t\t *\r\n\t\t * Base 10: `1000 ** x` where `x` equal 1(KB), 2(MB), 3(GB), etc.\r\n\t\t *\r\n\t\t * Base 2: `1 << x` where `x` equal 10(KiB), 20(MiB), 30(GiB), etc.\r\n\t\t */\r\n\t\tuseBinarySizeBase: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\tcreateImageThumbnails: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t// in MB. When the filename exceeds this limit, the thumbnail will not be generated.\r\n\t\tmaxThumbnailFileSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 10,\r\n\t\t},\r\n\t\tthumbnailWidth: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 120,\r\n\t\t},\r\n\t\tthumbnailHeight: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 120,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Can be used to limit the maximum number of files that will be handled\r\n\t\t * by this Dropzone\r\n\t\t */\r\n\t\tmaxFiles: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\t/**\r\n\t\t * If true, the dropzone will present a file selector when clicked.\r\n\t\t */\r\n\t\tclickable: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t/**\r\n\t\t * Whether dot files in directories should be ignored.\r\n\t\t */\r\n\t\tignoreHiddenFiles: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t/**\r\n\t\t * You can set accepted mime types here.\r\n\t\t *\r\n\t\t * The default implementation of the `accept()` function will check this\r\n\t\t * property, and if the Dropzone is clickable this will be used as\r\n\t\t * `accept` attribute.\r\n\t\t *\r\n\t\t * This is a comma separated list of mime types or extensions. E.g.:\r\n\t\t * - audio/*,video/*,image/png,.pdf\r\n\t\t *\r\n\t\t * See https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept\r\n\t\t * for a reference.\r\n\t\t */\r\n\t\tacceptedFileTypes: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault() {\r\n\t\t\t\treturn [];\r\n\t\t\t},\r\n\t\t},\r\n\t\t/**\r\n\t\t * If false, files will be added to the queue but the queue will not be\r\n\t\t * processed automatically.\r\n\t\t * This can be useful if you need some additional user input before sending\r\n\t\t * files (or if you want want all files sent at once).\r\n\t\t * If you're ready to send the file simply call myDropzone.processQueue()\r\n\t\t */\r\n\t\tautoProcessQueue: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t/**\r\n\t\t * If false, files added to the dropzone will not be queued by default.\r\n\t\t * You'll have to call `enqueueFile(file)` manually.\r\n\t\t */\r\n\t\tautoQueue: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true,\r\n\t\t},\r\n\t\t/**\r\n\t\t * If null, no capture type will be specified\r\n\t\t * If camera, mobile devices will skip the file selection and choose camera\r\n\t\t * If microphone, mobile devices will skip the file selection and choose the microphone\r\n\t\t * If camcorder, mobile devices will skip the file selection and choose the camera in video mode\r\n\t\t * On apple devices multiple must be set to false.  AcceptedFiles may need to\r\n\t\t * be set to an appropriate mime type (e.g. \"image/*\", \"audio/*\", or \"video/*\").\r\n\t\t */\r\n\t\tcapture: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\t// If the file size is too big.\r\n\t\terrMaxFileSizeExceeded: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault(fileSize: number, maxFileSize: number, units: string) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t`The file is too big (${round(fileSize, 1)}${units}).` +\r\n\t\t\t\t\t` Max file size: ${round(maxFileSize, 1)}${units}.`\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t},\r\n\t\terrInvalidFileType: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault(type: string, _acceptedTypes: string[], _file: VTransmitFile) {\r\n\t\t\t\treturn `You can't upload files of this type: ${type}`;\r\n\t\t\t},\r\n\t\t},\r\n\t\terrMaxFilesExceeded: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault(maxFiles: number) {\r\n\t\t\t\treturn `You can not upload any more files (${maxFiles} max).`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t/**\r\n\t\t * If `done()` is called without argument the file is accepted\r\n\t\t * If you call it with an error message, the file is rejected\r\n\t\t * (This allows for asynchronous validation).\r\n\t\t */\r\n\t\taccept: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault(_file: VTransmitFile, done: Function) {\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t},\r\n\t\tresize: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault: resizeImg,\r\n\t\t},\r\n\t\tdriverOptions: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: NewObject,\r\n\t\t},\r\n\t\tdriver: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault: XHRDriver,\r\n\t\t},\r\n\t},\r\n\r\n\tmounted() {\r\n\t\tthis.$on(VTransmitEvents.UploadProgress, this.updateTotalUploadProgress);\r\n\t\tthis.$on(VTransmitEvents.RemovedFile, this.updateTotalUploadProgress);\r\n\t\tthis.$on(VTransmitEvents.Canceled, (file: VTransmitFile) =>\r\n\t\t\tthis.$emit(VTransmitEvents.Complete, file)\r\n\t\t);\r\n\t\tthis.$on(VTransmitEvents.Complete, (file: VTransmitFile) => {\r\n\t\t\tif (\r\n\t\t\t\tthis.addedFiles.length === 0 &&\r\n\t\t\t\tthis.uploadingFiles.length === 0 &&\r\n\t\t\t\tthis.queuedFiles.length === 0\r\n\t\t\t) {\r\n\t\t\t\tPromise.resolve().then(() =>\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.QueueComplete, file)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t\twindow.addEventListener(\"paste\", <any>this.handlePaste);\r\n\r\n\t\tthis.$emit(VTransmitEvents.Initialize, this);\r\n\t},\r\n\r\n\tbeforeDestroy() {\r\n\t\twindow.removeEventListener(\"paste\", <any>this.handlePaste);\r\n\t},\r\n\r\n\tdata(): {\r\n\t\tdragging: boolean;\r\n\t\tprocessingThumbnail: boolean;\r\n\t\tthumbnailQueue: VTransmitFile[];\r\n\t\tfiles: VTransmitFile[];\r\n\t\tdefaultHeaders: { [key: string]: string };\r\n\t\tformStyles: { [key: string]: string };\r\n\t} {\r\n\t\treturn {\r\n\t\t\tdragging: false,\r\n\t\t\t// Used to keep the createThumbnail calls processing async one-at-a-time\r\n\t\t\tprocessingThumbnail: false,\r\n\t\t\tthumbnailQueue: [],\r\n\t\t\tfiles: [],\r\n\t\t\tdefaultHeaders: {\r\n\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t\"Cache-Control\": \"no-cache\",\r\n\t\t\t\t\"X-Requested-With\": \"XMLHttpRequest\",\r\n\t\t\t},\r\n\t\t\tformStyles: {\r\n\t\t\t\tvisibility: \"hidden !important\",\r\n\t\t\t\tposition: \"absolute !important\",\r\n\t\t\t\ttop: \"0 !important\",\r\n\t\t\t\tleft: \"0 !important\",\r\n\t\t\t\theight: \"0px !important\",\r\n\t\t\t\twidth: \"0px !important\",\r\n\t\t\t},\r\n\t\t};\r\n\t},\r\n\r\n\tcomputed: {\r\n\t\tinputEl(): HTMLInputElement | null {\r\n\t\t\tlet el = this.$refs.hiddenFileInput;\r\n\t\t\tif (!(el instanceof HTMLInputElement)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\treturn el;\r\n\t\t},\r\n\t\tformEl(): HTMLFormElement | null {\r\n\t\t\tlet el = this.$refs.uploadForm;\r\n\t\t\tif (!(el instanceof HTMLFormElement)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\treturn el;\r\n\t\t},\r\n\t\tfileSizeBase(): number {\r\n\t\t\tif (this.useBinarySizeBase) {\r\n\t\t\t\treturn 1024;\r\n\t\t\t}\r\n\r\n\t\t\treturn 1000;\r\n\t\t},\r\n\t\tmaxFileSizeBytes(): number {\r\n\t\t\treturn this.maxFileSize * this.fileSizeBase * this.fileSizeBase;\r\n\t\t},\r\n\t\tfilesToAccept(): string {\r\n\t\t\treturn this.acceptedFileTypes.join(\",\");\r\n\t\t},\r\n\t\tmultiple(): boolean {\r\n\t\t\treturn this.maxFiles === null || this.maxFiles > 1;\r\n\t\t},\r\n\t\taddedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Added);\r\n\t\t},\r\n\t\tqueuedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Queued);\r\n\t\t},\r\n\t\tacceptedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.files.filter(f => f.accepted);\r\n\t\t},\r\n\t\trejectedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.files.filter(f => !f.accepted);\r\n\t\t},\r\n\t\tuploadingFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Uploading);\r\n\t\t},\r\n\t\tcanceledFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Canceled);\r\n\t\t},\r\n\t\tfailedFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Error);\r\n\t\t},\r\n\t\ttimeoutFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Timeout);\r\n\t\t},\r\n\t\tsuccessfulFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(UploadStatuses.Success);\r\n\t\t},\r\n\t\tactiveFiles(): VTransmitFile[] {\r\n\t\t\treturn this.getFilesWithStatus(\r\n\t\t\t\tUploadStatuses.Uploading,\r\n\t\t\t\tUploadStatuses.Queued\r\n\t\t\t);\r\n\t\t},\r\n\t\tmaxFilesReached(): boolean {\r\n\t\t\treturn (\r\n\t\t\t\tthis.maxFiles != null && this.acceptedFiles.length >= this.maxFiles\r\n\t\t\t);\r\n\t\t},\r\n\t\tmaxFilesReachedClass(): string | null {\r\n\t\t\treturn this.maxFilesReached ? \"v-transmit__max-files--reached\" : null;\r\n\t\t},\r\n\t\tisDraggingClass(): Dictionary<boolean> {\r\n\t\t\treturn {\r\n\t\t\t\t\"v-transmit__upload-area--is-dragging\": this.dragging,\r\n\t\t\t\t[this.dragClass]: this.dragging,\r\n\t\t\t};\r\n\t\t},\r\n\t\tisUploading(): boolean {\r\n\t\t\treturn this.uploadingFiles.length > 0;\r\n\t\t},\r\n\t\tfileSlotBindings(): {\r\n\t\t\tfiles: VTransmitFile[];\r\n\t\t\tacceptedFiles: VTransmitFile[];\r\n\t\t\trejectedFiles: VTransmitFile[];\r\n\t\t\taddedFiles: VTransmitFile[];\r\n\t\t\tqueuedFiles: VTransmitFile[];\r\n\t\t\tuploadingFiles: VTransmitFile[];\r\n\t\t\tcanceledFiles: VTransmitFile[];\r\n\t\t\tfailedFiles: VTransmitFile[];\r\n\t\t\ttimeoutFiles: VTransmitFile[];\r\n\t\t\tsuccessfulFiles: VTransmitFile[];\r\n\t\t\tactiveFiles: VTransmitFile[];\r\n\t\t\tisUploading: boolean;\r\n\t\t} {\r\n\t\t\treturn {\r\n\t\t\t\tfiles: this.files,\r\n\t\t\t\tacceptedFiles: this.acceptedFiles,\r\n\t\t\t\trejectedFiles: this.rejectedFiles,\r\n\t\t\t\taddedFiles: this.addedFiles,\r\n\t\t\t\tqueuedFiles: this.queuedFiles,\r\n\t\t\t\tuploadingFiles: this.uploadingFiles,\r\n\t\t\t\tcanceledFiles: this.canceledFiles,\r\n\t\t\t\tfailedFiles: this.failedFiles,\r\n\t\t\t\ttimeoutFiles: this.timeoutFiles,\r\n\t\t\t\tsuccessfulFiles: this.successfulFiles,\r\n\t\t\t\tactiveFiles: this.activeFiles,\r\n\t\t\t\tisUploading: this.isUploading,\r\n\t\t\t};\r\n\t\t},\r\n\t\ttransport(): DriverInterface {\r\n\t\t\tlet Driver: DriverConstructor = <any>this.driver;\r\n\t\t\ttry {\r\n\t\t\t\treturn new Driver(\r\n\t\t\t\t\tnew VTransmitUploadContext(this),\r\n\t\t\t\t\tthis.driverOptions\r\n\t\t\t\t);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(`[vue-transmit] Error resolving upload driver:`, err);\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\twatch: {\r\n\t\tacceptedFiles(acceptedFiles: VTransmitFile[]) {\r\n\t\t\tif (this.maxFiles == null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (acceptedFiles.length >= this.maxFiles) {\r\n\t\t\t\tthis.$emit(VTransmitEvents.MaxFilesReached, this.files);\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tmethods: {\r\n\t\tgetFilesWithStatus(...statuses: UploadStatuses[]): VTransmitFile[] {\r\n\t\t\treturn this.files.filter(f => statuses.indexOf(f.status) > -1);\r\n\t\t},\r\n\t\tonFileInputChange(): void {\r\n\t\t\tlet { inputEl, formEl } = this;\r\n\t\t\tif (inputEl == null || formEl == null) {\r\n\t\t\t\t// This is unreachable code,\r\n\t\t\t\t// but we need to let TS know it.\r\n\t\t\t\tthrow TypeError();\r\n\t\t\t}\r\n\r\n\t\t\t// Can be null\r\n\t\t\tif (!inputEl.files) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.$emit(\r\n\t\t\t\tVTransmitEvents.AddedFiles,\r\n\t\t\t\tArray.from(inputEl.files).map(this.addFile)\r\n\t\t\t);\r\n\r\n\t\t\t// Reset input element's files\r\n\t\t\t// https://github.com/alexsasharegan/vue-transmit/issues/25\r\n\t\t\tformEl.reset();\r\n\t\t},\r\n\t\taddFile(file: File): VTransmitFile {\r\n\t\t\tconst vtFile = new VTransmitFile(file);\r\n\t\t\tvtFile.status = UploadStatuses.Added;\r\n\t\t\tthis.files.push(vtFile);\r\n\t\t\tthis.$emit(VTransmitEvents.AddedFile, vtFile);\r\n\t\t\tthis.enqueueThumbnail(vtFile);\r\n\t\t\tthis.acceptFile(vtFile, (error?: string) => {\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\tvtFile.accepted = false;\r\n\t\t\t\t\tthis.errorProcessing([vtFile], error);\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.RejectedFile, vtFile);\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.AcceptComplete, vtFile);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvtFile.accepted = true;\r\n\t\t\t\tthis.$emit(VTransmitEvents.AcceptedFile, vtFile);\r\n\t\t\t\tthis.$emit(VTransmitEvents.AcceptComplete, vtFile);\r\n\t\t\t\tif (this.autoQueue) {\r\n\t\t\t\t\tthis.enqueueFile(vtFile);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn vtFile;\r\n\t\t},\r\n\t\tacceptFile(file: VTransmitFile, done: (err?: string) => void): void {\r\n\t\t\t// File size check\r\n\t\t\tif (file.size > this.maxFileSizeBytes) {\r\n\t\t\t\t// size is in bytes, base is kilo multiplier, so base * base == mega\r\n\t\t\t\tlet mega = this.fileSizeBase * this.fileSizeBase;\r\n\t\t\t\tlet fileSize = file.size / mega;\r\n\t\t\t\tlet units = \"MB\";\r\n\t\t\t\tif (this.useBinarySizeBase) {\r\n\t\t\t\t\tunits = \"MiB\";\r\n\t\t\t\t}\r\n\t\t\t\treturn done(\r\n\t\t\t\t\tthis.errMaxFileSizeExceeded(fileSize, this.maxFileSize, units)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// File type check\r\n\t\t\tif (!this.isValidFileType(file, this.acceptedFileTypes)) {\r\n\t\t\t\treturn done(\r\n\t\t\t\t\tthis.errInvalidFileType(file.type, this.acceptedFileTypes, file)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// Upload limit check\r\n\t\t\tif (\r\n\t\t\t\tthis.maxFiles != null &&\r\n\t\t\t\tthis.acceptedFiles.length >= this.maxFiles\r\n\t\t\t) {\r\n\t\t\t\tthis.$emit(VTransmitEvents.MaxFilesExceeded, file);\r\n\t\t\t\treturn done(this.errMaxFilesExceeded(this.maxFiles));\r\n\t\t\t}\r\n\r\n\t\t\t// Happy path 😀\r\n\t\t\tthis.accept(file, done);\r\n\t\t},\r\n\t\tremoveFile(file: VTransmitFile): void {\r\n\t\t\tif (file.status === UploadStatuses.Uploading) {\r\n\t\t\t\tthis.cancelUpload(file);\r\n\t\t\t}\r\n\t\t\tconst idxToRm = this.files.findIndex(f => f.id === file.id);\r\n\t\t\tif (idxToRm > -1) {\r\n\t\t\t\tthis.$emit(\r\n\t\t\t\t\tVTransmitEvents.RemovedFile,\r\n\t\t\t\t\tthis.files.splice(idxToRm, 1)[0]\r\n\t\t\t\t);\r\n\t\t\t\tif (this.files.length === 0) {\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.Reset);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tremoveFilesWithStatus(...statuses: UploadStatuses[]): void {\r\n\t\t\tthis.getFilesWithStatus(...statuses).map(this.removeFile);\r\n\t\t},\r\n\t\tremoveAllFiles(cancelInProgressUploads = false): void {\r\n\t\t\tthis.files\r\n\t\t\t\t.filter(\r\n\t\t\t\t\tf =>\r\n\t\t\t\t\t\tf.status !== UploadStatuses.Uploading ||\r\n\t\t\t\t\t\tcancelInProgressUploads\r\n\t\t\t\t)\r\n\t\t\t\t.map(this.removeFile);\r\n\t\t},\r\n\t\ttriggerBrowseFiles(): void {\r\n\t\t\tif (this.inputEl) {\r\n\t\t\t\tthis.inputEl.click();\r\n\t\t\t}\r\n\t\t},\r\n\t\thandleClickUploaderAction(): void {\r\n\t\t\tif (this.clickable) {\r\n\t\t\t\tthis.triggerBrowseFiles();\r\n\t\t\t}\r\n\t\t},\r\n\t\tenqueueFile(file: VTransmitFile): void {\r\n\t\t\tif (file.status !== UploadStatuses.Added || file.accepted !== true) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\"This file can't be queued because it has already been processed or was rejected.\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tfile.status = UploadStatuses.Queued;\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\tPromise.resolve().then(this.processQueue);\r\n\t\t\t}\r\n\t\t},\r\n\t\tenqueueThumbnail(file: VTransmitFile): void {\r\n\t\t\tif (\r\n\t\t\t\t!this.createImageThumbnails ||\r\n\t\t\t\t!file.type.match(/image.*/) ||\r\n\t\t\t\tfile.size > this.maxThumbnailFileSize * 1024 * 1024\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.thumbnailQueue.push(file);\r\n\t\t\tPromise.resolve().then(this.processThumbnailQueue);\r\n\t\t},\r\n\t\tprocessThumbnailQueue(): void {\r\n\t\t\tlet file: VTransmitFile | undefined;\r\n\r\n\t\t\t// Employ a chain of self-calling, self-queuing createThumbnail calls\r\n\t\t\t// so execution can stay as non-blocking as possible.\r\n\t\t\tif (this.processingThumbnail || this.thumbnailQueue.length === 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.processingThumbnail = true;\r\n\t\t\tif ((file = this.thumbnailQueue.shift())) {\r\n\t\t\t\tthis.createThumbnail(file, () => {\r\n\t\t\t\t\tthis.processingThumbnail = false;\r\n\t\t\t\t\tthis.processThumbnailQueue();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\t\tcreateThumbnail(file: VTransmitFile, callback = noop): void {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.addEventListener(\r\n\t\t\t\t\"load\",\r\n\t\t\t\t() => {\r\n\t\t\t\t\tif (file.type === \"image/svg+xml\") {\r\n\t\t\t\t\t\tfile.dataUrl = reader.result;\r\n\t\t\t\t\t\tthis.$emit(VTransmitEvents.Thumbnail, file, reader.result);\r\n\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.createThumbnailFromUrl(file, reader.result, callback);\r\n\t\t\t\t},\r\n\t\t\t\tfalse\r\n\t\t\t);\r\n\r\n\t\t\t// FileReader requires a native File|Blob object\r\n\t\t\treader.readAsDataURL(file.nativeFile);\r\n\t\t},\r\n\t\tcreateThumbnailFromUrl(\r\n\t\t\tfile: VTransmitFile,\r\n\t\t\timageUrl: string,\r\n\t\t\tcallback?: Function\r\n\t\t): void {\r\n\t\t\tconst imgEl = document.createElement(\"img\");\r\n\r\n\t\t\timgEl.addEventListener(\r\n\t\t\t\t\"load\",\r\n\t\t\t\t() => {\r\n\t\t\t\t\tlet ctx: CanvasRenderingContext2D | null;\r\n\t\t\t\t\tfile.width = imgEl.width;\r\n\t\t\t\t\tfile.height = imgEl.height;\r\n\t\t\t\t\tconst resizeInfo = this.resize(file, {\r\n\t\t\t\t\t\twidth: this.thumbnailWidth,\r\n\t\t\t\t\t\theight: this.thumbnailHeight,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconst canvas = document.createElement(\"canvas\");\r\n\t\t\t\t\t// Can be null\r\n\t\t\t\t\tif (!(ctx = canvas.getContext(\"2d\"))) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcanvas.width = resizeInfo.dWidth;\r\n\t\t\t\t\tcanvas.height = resizeInfo.dHeight;\r\n\t\t\t\t\tctx.drawImage(\r\n\t\t\t\t\t\timgEl,\r\n\t\t\t\t\t\tresizeInfo.sx,\r\n\t\t\t\t\t\tresizeInfo.sy,\r\n\t\t\t\t\t\tresizeInfo.sWidth,\r\n\t\t\t\t\t\tresizeInfo.sHeight,\r\n\t\t\t\t\t\tresizeInfo.dx,\r\n\t\t\t\t\t\tresizeInfo.dy,\r\n\t\t\t\t\t\tresizeInfo.dWidth,\r\n\t\t\t\t\t\tresizeInfo.dHeight\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst thumbnail = canvas.toDataURL(\"image/png\");\r\n\t\t\t\t\tfile.dataUrl = thumbnail;\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.Thumbnail, file, thumbnail);\r\n\r\n\t\t\t\t\tif (callback) {\r\n\t\t\t\t\t\treturn callback();\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tfalse\r\n\t\t\t);\r\n\t\t\tif (callback) {\r\n\t\t\t\timgEl.addEventListener(\r\n\t\t\t\t\t\"error\",\r\n\t\t\t\t\tcallback as EventListenerOrEventListenerObject,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\timgEl.src = imageUrl;\r\n\t\t},\r\n\t\tprocessQueue(): void {\r\n\t\t\tconst len_uploading = this.uploadingFiles.length;\r\n\t\t\tif (\r\n\t\t\t\tlen_uploading >= this.maxConcurrentUploads ||\r\n\t\t\t\tthis.queuedFiles.length === 0\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\treturn this.processFiles(\r\n\t\t\t\t\tthis.queuedFiles.slice(\r\n\t\t\t\t\t\t0,\r\n\t\t\t\t\t\tthis.maxConcurrentUploads - len_uploading\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tlet i = len_uploading;\r\n\t\t\tlet file: VTransmitFile | undefined;\r\n\t\t\tfor (; i < this.maxConcurrentUploads; i++) {\r\n\t\t\t\tif ((file = this.queuedFiles.shift())) {\r\n\t\t\t\t\tthis.processFile(file);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tprocessFile(file: VTransmitFile): void {\r\n\t\t\tthis.processFiles([file]);\r\n\t\t},\r\n\t\tprocessFiles(files: VTransmitFile[]): void {\r\n\t\t\tlet file: VTransmitFile;\r\n\t\t\tfor (file of files) {\r\n\t\t\t\tfile.processing = true;\r\n\t\t\t\tfile.status = UploadStatuses.Uploading;\r\n\t\t\t\tthis.$emit(VTransmitEvents.Processing, file);\r\n\t\t\t}\r\n\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\tthis.$emit(VTransmitEvents.ProcessingMultiple, files);\r\n\t\t\t}\r\n\r\n\t\t\treturn this.uploadFiles(files);\r\n\t\t},\r\n\t\tcancelUpload(file: VTransmitFile): void {\r\n\t\t\t// Cancel a file before uploading\r\n\t\t\tif (\r\n\t\t\t\tfile.status === UploadStatuses.Added ||\r\n\t\t\t\tfile.status === UploadStatuses.Queued\r\n\t\t\t) {\r\n\t\t\t\tfile.status = UploadStatuses.Canceled;\r\n\t\t\t\tthis.$emit(VTransmitEvents.Canceled, file);\r\n\t\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.CanceledMultiple, [file]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Cancel an in-progress upload\r\n\t\t\tif (file.status === UploadStatuses.Uploading) {\r\n\t\t\t\tlet canceledFiles = this.transport.cancelUpload(file);\r\n\t\t\t\tlet f: VTransmitFile;\r\n\t\t\t\tfor (f of canceledFiles) {\r\n\t\t\t\t\tf.status = UploadStatuses.Canceled;\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.Canceled, f);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\t\tthis.$emit(VTransmitEvents.CanceledMultiple, canceledFiles);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\tthis.processQueue();\r\n\t\t\t}\r\n\t\t},\r\n\t\tuploadFile(file: VTransmitFile): void {\r\n\t\t\tthis.uploadFiles([file]);\r\n\t\t},\r\n\t\tuploadFiles(files: VTransmitFile[]): void {\r\n\t\t\tthis.transport.uploadFiles(files).then(result => {\r\n\t\t\t\tif (result.ok) {\r\n\t\t\t\t\treturn this.uploadFinished(files, result.data);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (result.err.type) {\r\n\t\t\t\t\tcase ErrType.Any:\r\n\t\t\t\t\t\tthis.errorProcessing(\r\n\t\t\t\t\t\t\tfiles,\r\n\t\t\t\t\t\t\tresult.err.message,\r\n\t\t\t\t\t\t\tresult.err.data\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ErrType.Timeout:\r\n\t\t\t\t\t\tthis.handleTimeout(\r\n\t\t\t\t\t\t\tfiles,\r\n\t\t\t\t\t\t\tresult.err.message,\r\n\t\t\t\t\t\t\tresult.err.data\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\texpectNever(result.err.type, \"unmatched error case\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\thandleTimeout(files: VTransmitFile[], message: string, data: any): void {\r\n\t\t\tlet f: VTransmitFile;\r\n\t\t\tfor (f of files) {\r\n\t\t\t\tf.status = UploadStatuses.Timeout;\r\n\t\t\t\tf.endProgress();\r\n\t\t\t\tthis.$emit(VTransmitEvents.Timeout, f, message, data);\r\n\t\t\t}\r\n\t\t\tthis.$emit(VTransmitEvents.TimeoutMultiple, files, message, data);\r\n\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\tthis.processQueue();\r\n\t\t\t}\r\n\t\t},\r\n\t\tupdateTotalUploadProgress(): void {\r\n\t\t\tconst progress = this.activeFiles.reduce(\r\n\t\t\t\t(memo, file) => {\r\n\t\t\t\t\tmemo.totalBytesSent += file.upload.bytesSent;\r\n\t\t\t\t\tmemo.totalBytes += file.upload.total;\r\n\t\t\t\t\treturn memo;\r\n\t\t\t\t},\r\n\t\t\t\t{ totalBytesSent: 0, totalBytes: 0, totalProgress: 100 }\r\n\t\t\t);\r\n\r\n\t\t\tif (this.activeFiles.length) {\r\n\t\t\t\tprogress.totalProgress =\r\n\t\t\t\t\t100 * progress.totalBytesSent / progress.totalBytes;\r\n\t\t\t}\r\n\r\n\t\t\tthis.$emit(VTransmitEvents.TotalUploadProgress, progress);\r\n\t\t},\r\n\t\tuploadFinished(\r\n\t\t\tfiles: VTransmitFile[],\r\n\t\t\tresponse: string | object | any[],\r\n\t\t\t...args: any[]\r\n\t\t): void {\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tfile.status = UploadStatuses.Success;\r\n\t\t\t\tfile.endProgress();\r\n\t\t\t\tthis.$emit(VTransmitEvents.Success, file, response, ...args);\r\n\t\t\t\tthis.$emit(VTransmitEvents.Complete, file);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\tthis.$emit(\r\n\t\t\t\t\tVTransmitEvents.SuccessMultiple,\r\n\t\t\t\t\tfiles,\r\n\t\t\t\t\tresponse,\r\n\t\t\t\t\t...args\r\n\t\t\t\t);\r\n\t\t\t\tthis.$emit(VTransmitEvents.CompleteMultiple, files);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\tthis.processQueue();\r\n\t\t\t}\r\n\t\t},\r\n\t\terrorProcessing(files: VTransmitFile[], message: string, data?: any) {\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tfile.status = UploadStatuses.Error;\r\n\t\t\t\tfile.errorMessage = message;\r\n\t\t\t\tfile.endProgress();\r\n\t\t\t\tthis.$emit(VTransmitEvents.Error, file, message, data);\r\n\t\t\t\tthis.$emit(VTransmitEvents.Complete, file);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.uploadMultiple) {\r\n\t\t\t\tthis.$emit(VTransmitEvents.ErrorMultiple, files, message, data);\r\n\t\t\t\tthis.$emit(VTransmitEvents.CompleteMultiple, files);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.autoProcessQueue) {\r\n\t\t\t\treturn this.processQueue();\r\n\t\t\t}\r\n\t\t},\r\n\t\tisValidFileType(\r\n\t\t\tfile: VTransmitFile,\r\n\t\t\tacceptedFileTypes: string[]\r\n\t\t): boolean {\r\n\t\t\tif (!acceptedFileTypes.length) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tconst mime_type = file.type;\r\n\t\t\tconst base_type = mime_type.slice(0, mime_type.indexOf(\"/\"));\r\n\t\t\tlet valid_type: string;\r\n\t\t\t// Return true on the first condition match,\r\n\t\t\t// otherwise exhaust all conditions and return false.\r\n\t\t\tfor (valid_type of acceptedFileTypes) {\r\n\t\t\t\tswitch (true) {\r\n\t\t\t\t\t// Handle extension validation\r\n\t\t\t\t\tcase valid_type.charAt(0) == \".\":\r\n\t\t\t\t\t\t// Ensure extension exists at the end of the filename.\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tfile.name\r\n\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t.indexOf(\r\n\t\t\t\t\t\t\t\t\tvalid_type.toLowerCase(),\r\n\t\t\t\t\t\t\t\t\tfile.name.length - valid_type.length\r\n\t\t\t\t\t\t\t\t) !== -1\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle globs (\"image/*\")\r\n\t\t\t\t\tcase valid_type.slice(-2) == \"/*\":\r\n\t\t\t\t\t\tif (base_type === valid_type.slice(0, -2)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Match mimetype exact\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tif (mime_type == valid_type) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\thandleDragStart(e: DragEvent): void {\r\n\t\t\tthis.$emit(\"drag-start\", e);\r\n\t\t},\r\n\t\thandleDragOver(e: DragEvent): void {\r\n\t\t\tthis.dragging = true;\r\n\t\t\tlet effect;\r\n\t\t\ttry {\r\n\t\t\t\t// Handle browser bug\r\n\t\t\t\teffect = e.dataTransfer.effectAllowed;\r\n\t\t\t} catch (error) {}\r\n\t\t\te.dataTransfer.dropEffect =\r\n\t\t\t\teffect === \"move\" || effect === \"linkMove\" ? \"move\" : \"copy\";\r\n\t\t\tthis.$emit(VTransmitEvents.DragOver, e);\r\n\t\t},\r\n\t\thandleDragEnter(e: DragEvent): void {\r\n\t\t\tthis.dragging = true;\r\n\t\t\tthis.$emit(VTransmitEvents.DragEnter, e);\r\n\t\t},\r\n\t\thandleDragLeave(e: DragEvent): void {\r\n\t\t\tthis.dragging = false;\r\n\t\t\tthis.$emit(VTransmitEvents.DragLeave, e);\r\n\t\t},\r\n\t\thandleDragEnd(e: DragEvent): void {\r\n\t\t\tthis.dragging = false;\r\n\t\t\tthis.$emit(VTransmitEvents.DragEnd, e);\r\n\t\t},\r\n\t\thandleDrop(e: DragEvent): void {\r\n\t\t\tthis.dragging = false;\r\n\t\t\tif (!e.dataTransfer) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet files: File[];\r\n\t\t\tlet items: DataTransferItem[];\r\n\r\n\t\t\tthis.$emit(VTransmitEvents.Drop, e);\r\n\t\t\tthis.$emit(\r\n\t\t\t\tVTransmitEvents.AddedFiles,\r\n\t\t\t\t(files = Array.from(e.dataTransfer.files))\r\n\t\t\t);\r\n\r\n\t\t\tif (!e.dataTransfer.items) {\r\n\t\t\t\tthis.handleFiles(files);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\titems = Array.from(e.dataTransfer.items);\r\n\t\t\tif (\r\n\t\t\t\t!items ||\r\n\t\t\t\t!items.length ||\r\n\t\t\t\t!(items[0].getAsFile || items[0].webkitGetAsEntry)\r\n\t\t\t) {\r\n\t\t\t\tthis.handleFiles(files);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.addFilesFromItems(items);\r\n\t\t},\r\n\t\thandlePaste(e: ClipboardEvent): void {\r\n\t\t\tlet cb = e.clipboardData || window.clipboardData;\r\n\t\t\tif (!e || !e.clipboardData || !e.clipboardData.items) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.$emit(VTransmitEvents.Paste, e);\r\n\t\t\tconst items = Array.from(e.clipboardData.items);\r\n\t\t\tif (items.length) {\r\n\t\t\t\tthis.addFilesFromItems(items);\r\n\t\t\t}\r\n\t\t},\r\n\t\thandleFiles(files: File[]): VTransmitFile[] {\r\n\t\t\treturn files.map(this.addFile);\r\n\t\t},\r\n\t\taddFilesFromItems(items: DataTransferItem[]): void {\r\n\t\t\tlet entry: FileSystemEntry;\r\n\t\t\tfor (const item of items) {\r\n\t\t\t\t// Newer API on standards track\r\n\t\t\t\tif (item.getAsFile && item.kind == \"file\") {\r\n\t\t\t\t\tlet file = item.getAsFile();\r\n\t\t\t\t\tif (file) {\r\n\t\t\t\t\t\tthis.addFile(file);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Vendor prefixed experimental API\r\n\t\t\t\tif (item.webkitGetAsEntry) {\r\n\t\t\t\t\tentry = item.webkitGetAsEntry();\r\n\r\n\t\t\t\t\tif (entry == null) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (webkitIsFile(entry)) {\r\n\t\t\t\t\t\tentry.file(this.addFile as any, console.error);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (webkitIsDir(entry)) {\r\n\t\t\t\t\t\tthis.addFilesFromDirectory(entry, entry.name);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\taddFilesFromDirectory(\r\n\t\t\tdirectory: WebKitDirectoryEntry,\r\n\t\t\tpath: string\r\n\t\t): void {\r\n\t\t\tdirectory.createReader().readEntries(\r\n\t\t\t\t<any>((entries: FileSystemEntry[]) => {\r\n\t\t\t\t\tfor (const entry of entries) {\r\n\t\t\t\t\t\tif (entry == null) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (webkitIsDir(entry)) {\r\n\t\t\t\t\t\t\tthis.addFilesFromDirectory(entry, `${path}/${entry.name}`);\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (webkitIsFile(entry)) {\r\n\t\t\t\t\t\t\tentry.file(\r\n\t\t\t\t\t\t\t\t<any>((file: File) => {\r\n\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\tthis.ignoreHiddenFiles &&\r\n\t\t\t\t\t\t\t\t\t\tfile.name.charAt(0) == \".\"\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t(file as any).fullPath = `${path}/${file.name}`;\r\n\t\t\t\t\t\t\t\t\tthis.addFile(file);\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tconsole.error\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tconsole.error\r\n\t\t\t);\r\n\t\t},\r\n\t},\r\n});\r\n</script>\r\n","import { VTransmitFile } from \"../classes/VTransmitFile\";\r\nimport { VTransmitUploadContext } from \"../classes/VTransmitUploadContext\";\r\nimport {\r\n\tDriverInterface,\r\n\tUploadResult,\r\n\tUploadResultOk,\r\n} from \"../core/interfaces\";\r\nimport {\r\n\t// ErrType,\r\n\tVTransmitEvents,\r\n} from \"../core/utils\";\r\nimport firebase from \"firebase\";\r\n\r\nexport interface FirebaseUploadOptions {\r\n\tstorageRef: (file: VTransmitFile) => firebase.storage.Reference;\r\n\tmetadata?: (file: VTransmitFile) => firebase.storage.UploadMetadata;\r\n}\r\n\r\nexport class FirebaseDriver implements DriverInterface {\r\n\tpublic cancelTokens: { [id: string]: () => any } = Object.create(null);\r\n\r\n\tconstructor(\r\n\t\tpublic context: VTransmitUploadContext,\r\n\t\tpublic options: FirebaseUploadOptions\r\n\t) {}\r\n\r\n\tcancelUpload(file: VTransmitFile): VTransmitFile[] {\r\n\t\tlet cancel = this.cancelTokens[file.id];\r\n\t\tif (cancel) {\r\n\t\t\tcancel();\r\n\t\t\tdelete this.cancelTokens[file.id];\r\n\t\t\tthis.context.emit(VTransmitEvents.Canceled, file);\r\n\t\t\treturn [file];\r\n\t\t}\r\n\r\n\t\treturn [];\r\n\t}\r\n\r\n\tuploadFiles(files: VTransmitFile[]): Promise<UploadResult<any>> {\r\n\t\tconsole.log(\"firebase upload\", { files });\r\n\t\tconst tasks: Promise<any>[] = [];\r\n\r\n\t\tfor (let i = 0, len = files.length; i < len; i++) {\r\n\t\t\tlet file = files[i];\r\n\t\t\ttasks.push(\r\n\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\tlet ref = this.options.storageRef(file);\r\n\t\t\t\t\tlet metadata =\r\n\t\t\t\t\t\tthis.options.metadata && this.options.metadata(file);\r\n\t\t\t\t\tlet task = ref.put(files[i].nativeFile, metadata);\r\n\t\t\t\t\tthis.cancelTokens[file.id] = () => task.cancel();\r\n\t\t\t\t\ttask.on(firebase.storage.TaskEvent.STATE_CHANGED, {\r\n\t\t\t\t\t\tcomplete: () => {\r\n\t\t\t\t\t\t\tdelete this.cancelTokens[file.id];\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnext: snapshot => {\r\n\t\t\t\t\t\t\tthis.context.emit(\r\n\t\t\t\t\t\t\t\tVTransmitEvents.UploadProgress,\r\n\t\t\t\t\t\t\t\tfile,\r\n\t\t\t\t\t\t\t\tsnapshot.bytesTransferred / snapshot.totalBytes * 100,\r\n\t\t\t\t\t\t\t\tsnapshot.bytesTransferred\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: console.error,\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn Promise.all(tasks).then(\r\n\t\t\t() => <UploadResultOk<{}>>{ ok: true, data: {} }\r\n\t\t);\r\n\t}\r\n}\r\n","import VueTransmit from \"./components/VueTransmit.vue\";\r\nimport { PluginObject } from \"vue\";\r\nimport {\r\n\tXHRDriver,\r\n\tParamNameStyle,\r\n\tXHRDriverOptions,\r\n\tXHRUploadGroup,\r\n} from \"./upload-drivers/xhr\";\r\nimport {\r\n\tFirebaseDriver,\r\n\tFirebaseUploadOptions,\r\n} from \"./upload-drivers/firebase\";\r\nimport { AxiosDriver, AxiosDriverOptions } from \"./upload-drivers/axios\";\r\n\r\nimport {\r\n\tDriverConstructor,\r\n\tDriverInterface,\r\n\tUploadErr,\r\n\tUploadResult,\r\n} from \"./core/interfaces\";\r\nimport {\r\n\tDimensions,\r\n\tDrawImageArgs,\r\n\tErrType,\r\n\tUploadStatuses,\r\n\tVTransmitEvents,\r\n} from \"./core/utils\";\r\n\r\nconst VueTransmitPlugin: PluginObject<undefined> = {\r\n\tinstall(Vue) {\r\n\t\tVue.component(\"VueTransmit\", VueTransmit);\r\n\t},\r\n\tname: \"vue-transmit\",\r\n};\r\n\r\nexport {\r\n\tVueTransmitPlugin,\r\n\tVueTransmit,\r\n\tXHRDriver,\r\n\tParamNameStyle,\r\n\tXHRDriverOptions,\r\n\tXHRUploadGroup,\r\n\tFirebaseDriver,\r\n\tFirebaseUploadOptions,\r\n\tAxiosDriver,\r\n\tAxiosDriverOptions,\r\n\tDriverConstructor,\r\n\tDriverInterface,\r\n\tUploadErr,\r\n\tUploadResult,\r\n\tDimensions,\r\n\tDrawImageArgs,\r\n\tErrType,\r\n\tUploadStatuses,\r\n\tVTransmitEvents,\r\n};\r\n\r\nexport default VueTransmitPlugin;\r\n"],"names":["x","UploadStatuses","ErrType","VTransmitEvents","idCounter","prefix","number","decimals","roundingFactor","Math","pow","round","bytes","seconds","fromBytesToKbit","fromBytesToMbit","ratio","width","height","_","msg","Error","file","dims","w","h","sRatio","dRatio","coords","sx","sy","sWidth","sHeight","dx","dy","dWidth","dHeight","scaleH","scaleW","entry","isFile","isDirectory","ParamNameStyle","this","VTransmitFile","idFactory","None","bytesSent","progress","total","speed","kbps","mbps","start","end","time","nativeFile","lastModified","lastModifiedDate","name","size","type","webkitRelativePath","upload","e","startProgress","min","loaded","Date","now","toKbps","toMbps","endProgress","Object","thumbnailLoaded","_dataUrl","value","defineProperty","enumerable","configurable","writable","uniqueId","vtransmit","props","$props","VTransmitUploadContext","event","_i","args","_a","$emit","acceptedFiles","rejectedFiles","addedFiles","queuedFiles","uploadingFiles","activeFiles","files","is_function","group_id","context","options","create","url","method","_b","withCredentials","_c","timeout","_d","paramName","_e","multipleParamNameStyle","_f","params","_g","headers","_h","responseType","responseParseFunc","_j","errUploadError","_k","errUploadTimeout","_l","renameFile","TypeError","constructor","XHRDriver","Promise","resolve","_this","ok","err","Any","message","data","xhr","XMLHttpRequest","updateProgress","handleUploadProgress","id","resolveStaticOrDynamic","uploadGroups","files_1","driverData","groupID","open","addEventListener","rmGroup","Timeout","status","Canceled","readyState","DONE","response","contentType","getResponseHeader","indexOf","JSON","parse","responseText","keys","headerName","setRequestHeader","formData","FormData","key","append","files_2","emit","Sending","uploadMultiple","SendingMultiple","i","len","length","getParamName","send","vm","allFilesFinished","files_3","files_4","handleProgress","UploadProgress","index","Indexed","Brackets","Empty","group","abort","Vue","extend","render","tag","String","default","disableDraggable","Boolean","uploadAreaClasses","Array","uploadAreaAttrs","NewObject","uploadAreaListeners","dragClass","filesSlotFirst","maxConcurrentUploads","Number","maxFileSize","useBinarySizeBase","createImageThumbnails","maxThumbnailFileSize","thumbnailWidth","thumbnailHeight","maxFiles","clickable","ignoreHiddenFiles","acceptedFileTypes","autoProcessQueue","autoQueue","capture","errMaxFileSizeExceeded","Function","fileSize","units","errInvalidFileType","_acceptedTypes","_file","errMaxFilesExceeded","accept","done","resize","resizeImg","driverOptions","driver","mounted","$on","updateTotalUploadProgress","RemovedFile","Complete","then","QueueComplete","window","handlePaste","Initialize","beforeDestroy","removeEventListener","dragging","processingThumbnail","thumbnailQueue","defaultHeaders","Accept","Cache-Control","X-Requested-With","formStyles","visibility","position","top","left","computed","inputEl","el","$refs","hiddenFileInput","HTMLInputElement","formEl","uploadForm","HTMLFormElement","fileSizeBase","maxFileSizeBytes","filesToAccept","join","multiple","getFilesWithStatus","Added","Queued","filter","f","accepted","Uploading","canceledFiles","failedFiles","timeoutFiles","successfulFiles","Success","maxFilesReached","maxFilesReachedClass","isDraggingClass","v-transmit__upload-area--is-dragging","isUploading","fileSlotBindings","transport","Driver","console","error","watch","MaxFilesReached","methods","statuses","arguments","onFileInputChange","AddedFiles","from","map","addFile","reset","vtFile","push","AddedFile","enqueueThumbnail","acceptFile","errorProcessing","RejectedFile","AcceptComplete","AcceptedFile","enqueueFile","mega","isValidFileType","MaxFilesExceeded","removeFile","cancelUpload","idxToRm","findIndex","splice","Reset","removeFilesWithStatus","apply","removeAllFiles","cancelInProgressUploads","triggerBrowseFiles","click","handleClickUploaderAction","processQueue","match","processThumbnailQueue","shift","createThumbnail","callback","noop","reader","FileReader","dataUrl","result","Thumbnail","createThumbnailFromUrl","readAsDataURL","imageUrl","imgEl","document","createElement","ctx","resizeInfo","canvas","getContext","drawImage","thumbnail","toDataURL","src","len_uploading","processFiles","slice","processFile","processing","Processing","ProcessingMultiple","uploadFiles","CanceledMultiple","canceledFiles_1","uploadFile","uploadFinished","handleTimeout","expectNever","TimeoutMultiple","reduce","memo","totalBytesSent","totalBytes","totalProgress","TotalUploadProgress","concat","SuccessMultiple","CompleteMultiple","errorMessage","ErrorMultiple","valid_type","mime_type","base_type","acceptedFileTypes_1","charAt","toLowerCase","handleDragStart","handleDragOver","effect","dataTransfer","effectAllowed","dropEffect","DragOver","handleDragEnter","DragEnter","handleDragLeave","DragLeave","handleDragEnd","DragEnd","handleDrop","items","Drop","getAsFile","webkitGetAsEntry","addFilesFromItems","handleFiles","clipboardData","Paste","items_1","item","kind","webkitIsFile","webkitIsDir","addFilesFromDirectory","directory","path","createReader","readEntries","entries","entries_1","fullPath","FirebaseDriver","cancel","cancelTokens","log","tasks","ref","storageRef","metadata","task","put","on","firebase","storage","TaskEvent","STATE_CHANGED","complete","next","snapshot","bytesTransferred","all","http","AxiosDriver","body","onUploadProgress","progressEvent","success","VueTransmitPlugin","install","component","VueTransmit"],"mappings":"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"}